<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GoodBoyboy &#39;s Blog｜惬意小屋-点滴记忆</title>
  
  
  <link href="https://blog.goodboyboy.top/atom.xml" rel="self"/>
  
  <link href="https://blog.goodboyboy.top/"/>
  <updated>2025-08-23T12:30:38.000Z</updated>
  <id>https://blog.goodboyboy.top/</id>
  
  <author>
    <name>GoodBoyboy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ESP32 S3开发小结</title>
    <link href="https://blog.goodboyboy.top/posts/4228956106.html"/>
    <id>https://blog.goodboyboy.top/posts/4228956106.html</id>
    <published>2025-08-23T12:30:38.000Z</published>
    <updated>2025-08-23T12:30:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小结">小结</h2><p>在历经状态机设计，爆栈，中文字体缺失，URL编码问题，C++野指针，页面竞争，任务假死，二维码无法扫描等亿系列问题后，终于弄好了。</p><p><img src="https://pic.goodboyboy.top/imgs/2025/08/23/xn20au.webp" alt="授权二维码"></p><p><img src="https://pic.goodboyboy.top/imgs/2025/08/23/xnlaox.webp" alt="授权成功"></p><p><img src="https://pic.goodboyboy.top/imgs/2025/08/23/xn8zd0.webp" alt="授权成功"></p><h2 id="目标">目标</h2><p>采用OAuth2的设备码授权方式，设备请求用户代码并向用户展示，由用户在自己的设备上进行授权，授权完成后ESP32拿到令牌，然后对用户资源进行访问。</p><h2 id="已实现功能">已实现功能</h2><h3 id="系统">系统</h3><p>采用FreeRTOS任务模式，实现多任务并发，结合排他锁解决并发竟态问题。</p><h3 id="WIFI">WIFI</h3><p>支持断线重连，当出现断线时自动切换任务。</p><h3 id="UI">UI</h3><p>支持切换不同页面，为不同功能页提供显示功能。</p><h3 id="OAuth">OAuth</h3><p>支持自动轮询授权情况，并支持当授权链接失效时自动重新获取以及生成二维码。</p><h2 id="不足">不足</h2><p>感觉还不是最佳实践，系统健壮性不高，无法支撑复杂功能（未验证）</p><p>屏幕还是太小了，128*64的分辨率一个正常包含链接的二维码都塞不下去，目前只能用二维码展示用户授权所需的用户代码，无法展示完整授权链接，可能需要制作一个专用APP用于扫码来拼接授权链接并在用户端调起授权。</p><h2 id="下一步方向">下一步方向</h2><p>寻找最佳实践的设计，增加系统健壮性，目前状态机设计还有提升空间</p><p>支持复杂的交互操作，支持16键输入控制系统以及页面，实现菜单选择等</p><p>接入NFC控件，便于用户进行碰一碰授权操作</p><p>接入蓝牙通信，动态控制设备连接附近WIFI（可能需要制作配套APP）</p><p>接入MQTT，实现远程控制（已实现样例）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;在历经状态机设计，爆栈，中文字体缺失，URL编码问题，C++野指针，页面竞争，任务假死，二维码无法扫描等亿系列问题后，终于弄好了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.goodboyboy.top/imgs/20</summary>
      
    
    
    
    <category term="说说" scheme="https://blog.goodboyboy.top/categories/%E8%AF%B4%E8%AF%B4/"/>
    
    
    <category term="说说" scheme="https://blog.goodboyboy.top/tags/%E8%AF%B4%E8%AF%B4/"/>
    
    <category term="ESP32" scheme="https://blog.goodboyboy.top/tags/ESP32/"/>
    
  </entry>
  
  <entry>
    <title>ESP32 S3外设小记</title>
    <link href="https://blog.goodboyboy.top/posts/2709354330.html"/>
    <id>https://blog.goodboyboy.top/posts/2709354330.html</id>
    <published>2025-08-22T11:03:36.000Z</published>
    <updated>2025-08-22T11:03:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>最近玩ESP32玩得起劲（太好玩了），光做软件上的编程还差点意思，昨天只实现了MQTT远程点灯，于是今天打算利用好这30多个GPIO口玩玩硬件上的。</p><p><img src="https://pic.goodboyboy.top/imgs/2025/08/22/w9n8zx.webp" alt="点绿灯"></p><p><img src="https://pic.goodboyboy.top/imgs/2025/08/22/w9v76y.webp" alt="点红灯"></p><h2 id="踩坑">踩坑</h2><p>因为是第一次玩，什么硬件知识都不懂，顶多了解了一点课上学的模电数电知识（还是非电气专业的课程，属于是基础中的基础），也不敢乱接（金属膜电阻都不会认，100欧的电阻找了半天），于是猛猛问ChatGPT</p><p>之前买了好几个有趣的外设，例如红外接收器，显示屏，有按键的数码管。</p><p>感觉有按键的数码管更好玩，16个按键可以设置16个状态，不用老是重新烧写（每次编译时间还不短。。。）</p><p>找客服要了一份资料，本来是打算只要一个管脚图的，客服发了一堆资料（手册，电路图等等），感觉事情的不简单</p><p>里面找到了一份TM1638B（驱动芯片）的Arduino工程文件，打开一看200多行代码（给刚点完灯的小白亿点点震惊）</p><p>尝试看了一下代码，嗯，完全看不懂。。。</p><p>不过无所谓，打算先烧上去再说，看看怎么玩</p><p>编译完成后，问了问ChatGPT该怎么组装</p><p>然而我发现这玩意的工作电压是5V，问了一下ChatGPT，才发现ESP32 S3是3.3V，两者不能直接连接</p><p>详细问了一下，才知道要电平转换，而且查了一下资料，这个芯片最低高电平电压是0.7*VDD，也就是至少要3.5V，3.3V完全不够，并且从TM1638B向ESP32传输数据时5V直接进GPIO口也会烧坏板子</p><p>没办法，那只能去淘宝物色一下电平转换的模块了</p><h2 id="尝试">尝试</h2><p>又看了一下红外接收器，发现也要5V，不过显示屏倒只要3.3V就能驱动，于是找ChatGPT又开始问东问西</p><p>然后就又了解到I2C是开漏输出，需要外部上拉电阻，4.4k欧或者10k欧，用于上拉信号，但是我没有4.4k欧的，只好用10k欧的</p><p>组装好电路后，找ChatGPT要了一份代码，就当我以为ok时，刷完固件显示屏直接花屏。。。</p><p>折腾过去又折腾过来，从I2C地址到线材通信等等，最后发现是我芯片提供错了，我用的这个OLED显示屏驱动芯片是SH1106，我给ChatGPT说成另一款屏幕的SSD1306了😅</p><p>ChatGPT一个流汗黄豆塞我脸上🤣</p><p>换了新的代码终于是能跑了。</p><p><img src="https://pic.goodboyboy.top/imgs/2025/08/22/wa9mmb.webp" alt="点亮屏幕"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近玩ESP32玩得起劲（太好玩了），光做软件上的编程还差点意思，昨天只实现了MQTT远程点灯，于是今天打算利用好这30多个GPIO口玩玩硬件上的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.goodboyboy.to</summary>
      
    
    
    
    <category term="说说" scheme="https://blog.goodboyboy.top/categories/%E8%AF%B4%E8%AF%B4/"/>
    
    
    <category term="说说" scheme="https://blog.goodboyboy.top/tags/%E8%AF%B4%E8%AF%B4/"/>
    
    <category term="ESP32" scheme="https://blog.goodboyboy.top/tags/ESP32/"/>
    
  </entry>
  
  <entry>
    <title>Arduino+VSCode开发ESP32-S3</title>
    <link href="https://blog.goodboyboy.top/posts/1775233746.html"/>
    <id>https://blog.goodboyboy.top/posts/1775233746.html</id>
    <published>2025-08-20T14:11:49.000Z</published>
    <updated>2025-08-20T14:11:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>Arduino IDE对于我来说太难用了，不过本质还是C++开发，理论上VSCode也可以。</p><h2 id="安装-Arduino-CLI">安装 Arduino CLI</h2><p>Arduino不仅提供了IDE，也提供有命令行工具</p><p>首先安装Arduino CLI，在 <a href="https://docs.arduino.cc/arduino-cli/installation/">https://docs.arduino.cc/arduino-cli/installation/</a> 中找到适合自己系统的Arduino CLI并进行安装。</p><p>安装完成后输入<code>arduino-cli help core</code>确保已经正常安装。</p><h2 id="配置-Arduino-CLI">配置 Arduino CLI</h2><p>首先需要初始化Arduino CLI</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arduino-cli config init</span><br></pre></td></tr></table></figure><p>配置“用户目录”，该目录会用于存放第三方库等等，推荐和config设置为一个路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arduino-cli config <span class="built_in">set</span> directories.user <span class="string">&quot;用户目录路径&quot;</span></span><br></pre></td></tr></table></figure><p>然后添加官方的加速源，否则可能下载会十分慢</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arduino-cli config <span class="built_in">set</span> board_manager.additional_urls https://jihulab.com/esp-mirror/espressif/arduino-esp32/-/raw/gh-pages/package_esp32_index_cn.json</span><br></pre></td></tr></table></figure><p>接着更新板子列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arduino-cli core update-index</span><br></pre></td></tr></table></figure><p>这里我们可以先不下载。</p><h2 id="配置-VSCode与环境">配置 VSCode与环境</h2><p>安装<code>Arduino Maker Workshop</code>插件，然后打开一个文件夹用于工作目录。</p><p>插件安装完成后在侧边栏点击插件，点击<code>Maker Workshop Home</code>，即可打开配置栏。</p><p>首先进入<code>Boards Manager</code>，点击Not Installed标签，搜索<code>esp32</code>，然后点最右边的倒三角展开，版本选择<code>x.x.x-cn</code>，这个才是加速的版本</p><p>然后点击版本旁边的下载按钮开始下载。</p><p>安装完成后进入<code>Board Selection</code>，选择<code>ESP32S3 Dev Module</code>即可。</p><p>接着点击<code>Board Configuration</code>配置板子</p><p><code>Uplaod Speed</code>最好别选921600，太高板子可能承受不住，512000我的可以正常刷入，实际根据板子体质决定。</p><p><code>Flash Mode</code>根据实际情况来决定，部分板子可能支持OPI，可以通过下面命令查看（错误的配置会导致板子无法启动）：</p><blockquote><p>提示esptool找不到则是没安装esptool，如何安装esptool请自行Google</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">esptool flash-id</span><br></pre></td></tr></table></figure><p>然后回输出<code>Flash Memory Information</code>，在<code>Flash type set in eFuse</code>一栏中查看，我的板子是<code>quad (4 data lines)</code></p><p>所以我选择<code>QIO 80MHz</code>，如果你的Flash支持8 data lines则可以选择OPI</p><p><code>Flash Size</code>是多少选多少，我的是N16R8，所以我选择的是<code>16MB</code></p><p><code>Partition Scheme</code>我选的是<code>16M Flash（2MB APP/12.5MB FATFS）</code>，自己根据实际情况选择</p><p><code>PSRAM</code>一般情况下，ESP32-S3-WROOM-1-N4R8/N8R8/N16R8是支持Octal SPI的，可以选择OPI PSRAM</p><p>该文中有详细表：<a href="https://blog.csdn.net/tianizimark/article/details/125264464">https://blog.csdn.net/tianizimark/article/details/125264464</a></p><p><code>Arduino Run On</code>和<code>Events Run On</code>是否要同一个核心看你自己，不同核心的话可能会出现多线程竟态问题（存疑），如果工程简单的话都跑在一个核心上没问题</p><p>剩下的全部默认即可</p><h2 id="编译烧录">编译烧录</h2><p>点击Compile和Upload就行。</p><h2 id="飘红问题">飘红问题</h2><p>有时候安装第三方库include后会飘红，这里只需要编译（Compile）一下，就会自动补齐配置</p><p>如果还是有问题，按住<code>Ctrl+Shift+P</code>打开VSCode的命令栏，找到<code>编辑配置（UI）</code>，指定一下g++位置，包含路径中添加库文件夹即可</p><p>例如我的是<code>C:\Users\GoodBoyboy\AppData\Local\Arduino15\libraries/**</code></p><h2 id="参考">参考</h2><p><a href="https://docs.arduino.cc/arduino-cli/getting-started/">https://docs.arduino.cc/arduino-cli/getting-started/</a></p><p><a href="https://blog.csdn.net/ZHOU_YONG915/article/details/130118049">https://blog.csdn.net/ZHOU_YONG915/article/details/130118049</a></p><p><a href="https://docs.espressif.com/projects/arduino-esp32/en/latest/installing.html">https://docs.espressif.com/projects/arduino-esp32/en/latest/installing.html</a></p><p><a href="https://blog.csdn.net/tianizimark/article/details/125264464">https://blog.csdn.net/tianizimark/article/details/125264464</a></p><p><a href="https://blog.csdn.net/tianizimark/article/details/124663902">https://blog.csdn.net/tianizimark/article/details/124663902</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;Arduino IDE对于我来说太难用了，不过本质还是C++开发，理论上VSCode也可以。&lt;/p&gt;
&lt;h2 id=&quot;安装-Arduino-CLI&quot;&gt;安装 Arduino CLI&lt;/h2&gt;
&lt;p&gt;Arduino不仅提供了IDE，也提供</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.goodboyboy.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Hardware" scheme="https://blog.goodboyboy.top/categories/Hardware/"/>
    
    
    <category term="EPS32" scheme="https://blog.goodboyboy.top/tags/EPS32/"/>
    
    <category term="Arduino" scheme="https://blog.goodboyboy.top/tags/Arduino/"/>
    
  </entry>
  
  <entry>
    <title>EPS32-S3刷入MicroPython</title>
    <link href="https://blog.goodboyboy.top/posts/3337643602.html"/>
    <id>https://blog.goodboyboy.top/posts/3337643602.html</id>
    <published>2025-08-18T03:30:16.000Z</published>
    <updated>2025-08-18T03:30:16.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><p>本教程适合乐鑫官方ESP32-S3模组，非官方模组可能不适用</p></div><h2 id="下载固件">下载固件</h2><blockquote><p>Tips:根据 <a href="https://github.com/micropython/micropython/commit/6201e77999b3614518abc4b21773e735d9b0b0ee">Commit 6201e77</a>，现在MicroPython已经支持自动计算flash大小</p></blockquote><p>进入MicroPython的ESP32 S3的固件下载页面<a href="https://micropython.org/download/ESP32_GENERIC_S3/">https://micropython.org/download/ESP32_GENERIC_S3/</a></p><p>在<code>Firmware (Support for Octal-SPIRAM)</code>下方找到最新的一个固件，点击<code>[.bin]</code>下载bin格式的固件。</p><h2 id="安装刷入工具">安装刷入工具</h2><p>这里使用乐鑫的官方刷入工具<code>esptool</code></p><blockquote><p>没有python环境请先安装python环境</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install esptool</span><br></pre></td></tr></table></figure><p>安装esptool时会自动配置好环境变量</p><h2 id="刷入固件">刷入固件</h2><p>将EPS32-S3接入计算机，建议使用USB to COM口，即插即用。</p><blockquote><p>一般来说esptool会自动识别COM口，不需要在命令中手动指定；Linux环境下可能需要将命令中的<code>esptool</code>替换为<code>esptool.py</code></p></blockquote><p>首先擦除flash：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">esptool erase_flash</span><br></pre></td></tr></table></figure><p>然后刷入固件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">esptool --baud 460800 write_flash 0 你的固件.bin</span><br></pre></td></tr></table></figure><p>如果中途刷入失败可以尝试降低或移除<code>--baud 460800</code>（一般不会）</p><h2 id="使用MicroPython">使用MicroPython</h2><p>刷完将板子重接接入计算机，使用各种交互式终端连接对应的COM口即可</p><p>可以使用下面代码查看内存和闪存情况：</p><p>查看内存：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> micropython</span><br><span class="line">micropython.mem_info()</span><br></pre></td></tr></table></figure><p>查看闪存：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> esp</span><br><span class="line">esp.flash_size()</span><br><span class="line"><span class="comment">#或者esp.flash_size()/1024/1024</span></span><br></pre></td></tr></table></figure><h2 id="自行编译固件（可选）">自行编译固件（可选）</h2><h3 id="本地编译">本地编译</h3><blockquote><p>需要良好的网络环境</p></blockquote><p>这里需要使用到IDF</p><p>目前，MicroPython支持IDF v5.2、v5.2.2、v5.3、v5.4、v5.4.1 和 v5.4.2</p><p>环境最好为Linux，Windows下则需要使用WSL</p><p>首先Clone拉取IDF</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b v5.4.2 --recursive https://github.com/espressif/esp-idf</span><br></pre></td></tr></table></figure><p>然后安装IDF：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> esp-idf</span><br><span class="line">./install.sh esp32</span><br><span class="line"><span class="built_in">source</span> export.sh <span class="comment">#用于设置环境变量，每个新会话都需要重新设置</span></span><br></pre></td></tr></table></figure><p>然后回到上一级目录，拉取MicroPython</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/micropython/micropython</span><br></pre></td></tr></table></figure><p>构建交叉编译器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> micropython</span><br><span class="line">make -C mpy-cross</span><br></pre></td></tr></table></figure><p>构建MicroPython</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ports/esp32</span><br><span class="line">make submodules</span><br><span class="line">make BOARD=ESP32_GENERIC_S3 BOARD_VARIANT=SPIRAM_OCT</span><br></pre></td></tr></table></figure><p>构建完成后可以在<code>build-ESP32_GENERIC_S3-SPIRAM_OCT</code>文件夹中找到<code>firmware.bin</code>，这就是最终的固件。</p><h3 id="GitHub-Action-编译">GitHub Action 编译</h3><p>可以使用GitHub Action来编译固件，避免网络环境问题。</p><p><a href="https://github.com/GoodBoyboy666/ESP32-S3-N16R8-Action">https://github.com/GoodBoyboy666/ESP32-S3-N16R8-Action</a></p><p>可以自行fork修改</p><h2 id="参考">参考</h2><p><a href="https://github.com/micropython/micropython/tree/master/ports/esp32">https://github.com/micropython/micropython/tree/master/ports/esp32</a></p><p><a href="https://github.com/micropython/micropython/tree/master/ports/esp32/boards/ESP32_GENERIC_S3">https://github.com/micropython/micropython/tree/master/ports/esp32/boards/ESP32_GENERIC_S3</a></p><p><a href="https://micropython.org/download/ESP32_GENERIC_S3/">https://micropython.org/download/ESP32_GENERIC_S3/</a></p><p><a href="http://micropython.com.cn/en/latet/esp32/quickref.html#installing-micropython">http://micropython.com.cn/en/latet/esp32/quickref.html#installing-micropython</a></p><p><a href="https://github.com/espressif/esp-idf/blob/master/README_CN.md">https://github.com/espressif/esp-idf/blob/master/README_CN.md</a></p><p><a href="https://www.bilibili.com/video/BV1s24y137cK?vd_source=d70f12a573c31ee545ff78eaf31116ea">https://www.bilibili.com/video/BV1s24y137cK?vd_source=d70f12a573c31ee545ff78eaf31116ea</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;本教程适合乐鑫官方ESP32-S3模组，非官方模组可能不适用&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;下载固件&quot;&gt;下载固件&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Tips:根据 &lt;a href=&quot;https://gi</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.goodboyboy.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Hardware" scheme="https://blog.goodboyboy.top/categories/Hardware/"/>
    
    
    <category term="EPS32" scheme="https://blog.goodboyboy.top/tags/EPS32/"/>
    
    <category term="MicroPython" scheme="https://blog.goodboyboy.top/tags/MicroPython/"/>
    
  </entry>
  
  <entry>
    <title>EPS32 S3刷入Picokeys</title>
    <link href="https://blog.goodboyboy.top/posts/3701080839.html"/>
    <id>https://blog.goodboyboy.top/posts/3701080839.html</id>
    <published>2025-08-18T02:56:57.000Z</published>
    <updated>2025-08-18T02:56:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>Picokeys是一个开源的安全密钥固件，支持在Raspberry Pico (RP2040, RP2350) 和 ESP32-S3上运行</p><p>目前PicoKeys有三种功能：HSM、Fido2 Passkey、OpenPGP &amp; PIV</p><h2 id="刷入固件">刷入固件</h2><p>一般EPS32 S3开发板有两个Type-c口，一个是USB直通，一个是USB to COM</p><p>使用USB直通需要进入特殊的bootloader模式才能刷入</p><p>使用USB to COM则可以直接刷入（需要安装对应芯片的驱动，我的板子上是CH343）</p><p>进入bootloader模式方法：</p><p>插入计算机，按住Boot按键后再点按RST按键，最后松开Boot按键。</p><p>然后进入Picokeys的ESP32 Flasher（<a href="https://www.picokeys.com/esp32-flasher/">https://www.picokeys.com/esp32-flasher/</a>）</p><blockquote><p>这里需要使用Edge或者Chrome浏览器，Firefox不支持</p></blockquote><p>选择想要刷入的固件，点击Connect，在浏览器弹出的窗口中选择Jtagxxxx或者Usb single serial</p><h2 id="修补">修补</h2><p>刷完固件后还需要使用Pico Commissioner来修补VIDPID</p><blockquote><p>修补是在<code>非bootloader模式</code>下进行的<br>拔出EPS32再插入（如果之前选择插入的是USB to COM，则可能需要插至USB直通）</p></blockquote><p>进入Pico Commissioner（<a href="https://www.picokeys.com/pico-commissioner/">https://www.picokeys.com/pico-commissioner/</a>）</p><p>选择一个Vendor，其他设置自己自定义，然后在Options下方勾选Initialize</p><p>最后点击<code>Commission via WebUSB</code>，选择Picokeys进行修补</p><blockquote><p>Tips：如果点击后没反应可以尝试使用手机的Edge或者Chrome试试</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;Picokeys是一个开源的安全密钥固件，支持在Raspberry Pico (RP2040, RP2350) 和 ESP32-S3上运行&lt;/p&gt;
&lt;p&gt;目前PicoKeys有三种功能：HSM、Fido2 Passkey、OpenPG</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.goodboyboy.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Hardware" scheme="https://blog.goodboyboy.top/categories/Hardware/"/>
    
    
    <category term="EPS32" scheme="https://blog.goodboyboy.top/tags/EPS32/"/>
    
    <category term="Picokeys" scheme="https://blog.goodboyboy.top/tags/Picokeys/"/>
    
  </entry>
  
  <entry>
    <title>Debian13安装Nvidia驱动</title>
    <link href="https://blog.goodboyboy.top/posts/2388809258.html"/>
    <id>https://blog.goodboyboy.top/posts/2388809258.html</id>
    <published>2025-08-11T10:02:36.000Z</published>
    <updated>2025-08-11T10:02:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="检查硬件">检查硬件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lspci -vnn | grep -i VGA</span><br></pre></td></tr></table></figure><p>检查输出内容中是否含有<code>Nvidia</code>字样的设备。</p><h2 id="修改源">修改源</h2><p>NVIDIA驱动属于闭源软件，需要启用<code>non-free</code>源</p><p>编辑source.list文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>在每个源后面加上<code>contrib</code>和<code>non-free</code>，保存后退出。</p><p>然后更新软件包列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br></pre></td></tr></table></figure><h2 id="安装驱动">安装驱动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install linux-headers-$(<span class="built_in">uname</span> -r) nvidia-driver firmware-misc-nonfree</span><br></pre></td></tr></table></figure><p>安装时会自动禁用nouveau</p><h2 id="导入签名公钥">导入签名公钥</h2><p>因为修改了内核模块，将无法通过secure boot启动，需要手动导入密钥至bios，如果主板未打开secure boot则可以跳过本节。</p><p>安装时已自动生成了密钥并对模块进行了签名，这里只需要导入签名公钥即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mokutil --import /var/lib/dkms/mok.pub</span><br></pre></td></tr></table></figure><p>一般是这个路径，安装日志中会显示文件位置</p><p>然后会要求你输入密码，该密码仅用于临时验证，不需要太复杂</p><h2 id="重启机器">重启机器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure><p>如果导入了签名公钥，那么在启动时会出现MOK management界面，选择<code>Enroll MOK</code>-&gt;<code>Continue</code>，然后输入刚刚使用mokutil导入公钥时输入的密码。</p><h2 id="检查驱动">检查驱动</h2><p>进入终端输入<code>nvidia-smi</code>，如果输出了显卡详细信息以及GPU进程，则代表驱动安装成功。</p><h2 id="食用方法">食用方法</h2><p>启动程序时设置环境变量<code>__NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia</code>即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;检查硬件&quot;&gt;检查硬件&lt;/h2&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td clas</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.goodboyboy.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Software" scheme="https://blog.goodboyboy.top/categories/Software/"/>
    
    
    <category term="Nvidia" scheme="https://blog.goodboyboy.top/tags/Nvidia/"/>
    
    <category term="Debian13" scheme="https://blog.goodboyboy.top/tags/Debian13/"/>
    
  </entry>
  
  <entry>
    <title>现在小孩都这么早熟么。。。</title>
    <link href="https://blog.goodboyboy.top/posts/1421567704.html"/>
    <id>https://blog.goodboyboy.top/posts/1421567704.html</id>
    <published>2025-08-04T08:35:09.000Z</published>
    <updated>2025-08-04T08:35:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>今年下午去医院取上午抽血的检查报告时，我在那里等电梯，一个小屁孩跑过来让我跟着他。我一脸懵逼的看着他，我问他干什么他也不说，就让我跟着他。</p><p>因为取结果只有我一个人，而且这会医院下午才上班，人还不是很多，所以我下意识的想着他会不会想拐我，于是站在那里没动。</p><p>不过转念一想，一个还没我一半高的小屁孩怎么拐我，看着他一直催，我又怕是真的有什么事情，他妈妈需要帮忙什么的（因为旁边就是儿科）</p><p>于是我就慢慢的跟在他后面。</p><p>我又想万一不止他一个呢？例如利用小孩让人放松警惕把我带到偏僻地方，然后出来几个大汉把我绑走什么的，或者未成年犯罪？而且看他那不怀好意的眼神（真的就是那种赤裸裸不怀好意的眼神），我又有点不想管了。</p><p>不过还没等我想完，他就已经往儿科里去了，我想那个地方怎么都不能发生绑架这种事吧，想看看他到底搞什么鬼，便和他一起进了儿科</p><p>然后令我无语的地方来了</p><p>他把我带到儿科护士值班的地方，指着那里的一个护士说让我嫁给她？？？？？？</p><p>什么跟什么？？？</p><p>然后那个护士对着我和那个小孩笑。。。</p><p>哪家小屁孩又放出来没人管了</p><p>我当即转身就准备走，懒得和这种小屁孩计较，虽然我不急但是我的时间也不是让这种人随意浪费的</p><p>然后那个小屁孩还拉着我的手在那里继续说让我嫁给她。。。</p><p>我无语的把手抽出来，对着他说我有自己的事情，然后就没理他自己走了。</p><p>真的是什么跟什么，这么屁大的孩子知道结婚的意义是什么么，也不知道是在哪学的这些。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今年下午去医院取上午抽血的检查报告时，我在那里等电梯，一个小屁孩跑过来让我跟着他。我一脸懵逼的看着他，我问他干什么他也不说，就让我跟着他。&lt;/p&gt;
&lt;p&gt;因为取结果只有我一个人，而且这会医院下午才上班，人还不是很多，所以我下意识的想着他会不会想拐我，于是站在那里没动。&lt;/p</summary>
      
    
    
    
    <category term="说说" scheme="https://blog.goodboyboy.top/categories/%E8%AF%B4%E8%AF%B4/"/>
    
    
    <category term="说说" scheme="https://blog.goodboyboy.top/tags/%E8%AF%B4%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>《动物迷城》二周目通关！</title>
    <link href="https://blog.goodboyboy.top/posts/2703079552.html"/>
    <id>https://blog.goodboyboy.top/posts/2703079552.html</id>
    <published>2025-07-29T09:57:51.000Z</published>
    <updated>2025-07-29T09:57:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>《动物迷城》二周目通关！非常好玩而且有意义的一款国产CRPG游戏😄</p><blockquote><p><em><strong>“逆境或许能将人毁灭，但别让它轻易把你我打败”</strong></em></p></blockquote><p><img src="https://pic.goodboyboy.top/imgs/2025/07/29/%E9%80%9A%E5%85%B3.webp" alt="通关"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;《动物迷城》二周目通关！非常好玩而且有意义的一款国产CRPG游戏😄&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;“逆境或许能将人毁灭，但别让它轻易把你我打败”&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;h</summary>
      
    
    
    
    <category term="说说" scheme="https://blog.goodboyboy.top/categories/%E8%AF%B4%E8%AF%B4/"/>
    
    
    <category term="动物迷城" scheme="https://blog.goodboyboy.top/tags/%E5%8A%A8%E7%89%A9%E8%BF%B7%E5%9F%8E/"/>
    
    <category term="游戏" scheme="https://blog.goodboyboy.top/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>Bing索引终于恢复了</title>
    <link href="https://blog.goodboyboy.top/posts/3129869980.html"/>
    <id>https://blog.goodboyboy.top/posts/3129869980.html</id>
    <published>2025-07-22T01:41:40.000Z</published>
    <updated>2025-07-22T01:41:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>差不多半年前，不知道发生了什么，博客在Bing的索引直线下降，直到完全没有。</p><p><img src="https://pic.goodboyboy.top/imgs/2025/07/22/flron3.webp" alt="索引情况"></p><p>URL检查是能索引的，但是就是死活不索引。。。</p><p>后面看到有人也有这个情况，是需要向客服提交工单解决，于是大概一个月前我也向客服提了工单，中间陆陆续续收到几封客服邮件，今天收到客服邮件说已经解决了该问题</p><p><img src="https://pic.goodboyboy.top/imgs/2025/07/22/fnjh75.webp" alt="邮件"></p><p>上线Webmaster Tools看了一下，确实印象数上升了</p><p><img src="https://pic.goodboyboy.top/imgs/2025/07/22/foietp.webp" alt="印象数"></p><p>去bing搜了一下site:goodboyboy.top，也确实是能看见博客了</p><p><img src="https://pic.goodboyboy.top/imgs/2025/07/22/fqgolt.webp" alt="搜索页面"></p><h2 id="后记">后记</h2><p>长达半年的丢失索引终于解决了😂，后面只能等排名慢慢恢复了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;差不多半年前，不知道发生了什么，博客在Bing的索引直线下降，直到完全没有。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.goodboyboy.top/imgs/2025/07/22/flron3.webp&quot; alt=&quot;</summary>
      
    
    
    
    <category term="说说" scheme="https://blog.goodboyboy.top/categories/%E8%AF%B4%E8%AF%B4/"/>
    
    
    <category term="索引" scheme="https://blog.goodboyboy.top/tags/%E7%B4%A2%E5%BC%95/"/>
    
    <category term="说说" scheme="https://blog.goodboyboy.top/tags/%E8%AF%B4%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>家里蹲大学开始招生！</title>
    <link href="https://blog.goodboyboy.top/posts/108438560.html"/>
    <id>https://blog.goodboyboy.top/posts/108438560.html</id>
    <published>2025-07-21T03:39:11.000Z</published>
    <updated>2025-07-21T03:39:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正文">正文</h2><p>继上文《<a href="/posts/901378813.html">家里蹲大学即将建校，欢迎各位莘莘学子来本校深造（doge</a>》，今日家里蹲大学正式建校（doge</p><p>我们将为每位同学免费分发本校的教育邮箱，教育邮箱申请方式如下：</p><p>向me#goodboyboy.top（#换成@）发送邮件进行申请，申请内容需要包含以下内容：</p><ul><li>用户名（仅允许包含A-Z，a-z，0-9）</li></ul><p>为防止被用于发送非法邮件，此邮箱使用CloudFlare邮件转发功能，只允许收信不允许发信，转发目的地为发送申请邮件的邮箱地址。</p><p>申请通过后将会向转发目的地邮箱发送一封验证邮件，请及时完整验证避免影响收信。</p><p>另外，禁止滥用教育邮箱，否则我们有权利收回教育邮箱</p><h2 id="题外话">题外话</h2><p>可以去薅薅管的不严的一些学生优惠，像GitHub Education这种特别严的就不要想了</p><p>另外因为使用邮件的是转发功能，所以收信可能会慢一些，国内的某些邮箱甚至可能收不到信，可以提前用自己的另一个邮箱测试一下。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;
&lt;p&gt;继上文《&lt;a href=&quot;/posts/901378813.html&quot;&gt;家里蹲大学即将建校，欢迎各位莘莘学子来本校深造（doge&lt;/a&gt;》，今日家里蹲大学正式建校（doge&lt;/p&gt;
&lt;p&gt;我们将为每位同学免费分发本校的教育邮箱，教育邮</summary>
      
    
    
    
    <category term="推广" scheme="https://blog.goodboyboy.top/categories/%E6%8E%A8%E5%B9%BF/"/>
    
    
    <category term="大学" scheme="https://blog.goodboyboy.top/tags/%E5%A4%A7%E5%AD%A6/"/>
    
    <category term="招生" scheme="https://blog.goodboyboy.top/tags/%E6%8B%9B%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>家里蹲大学即将建校，欢迎各位莘莘学子来本校深造（doge</title>
    <link href="https://blog.goodboyboy.top/posts/901378813.html"/>
    <id>https://blog.goodboyboy.top/posts/901378813.html</id>
    <published>2025-07-20T16:10:26.000Z</published>
    <updated>2025-07-20T16:10:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>标题是开玩笑的（doge</p><p>最近注册了一个edu.kg后缀的域名，打算当一把校长（doge，看看能不能过那些教育邮箱验证</p><p>这类野鸡域名可能难过，不过可以试试，反正注册一个也没多少钱，实在不行就拿来自己玩了</p><p>目前正在等待全球NS记录同步，到时候整个官网和域名邮箱，欢迎有意愿的同学们来本校深造，我们会给每位学子分发自己的教育邮箱（doge</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;标题是开玩笑的（doge&lt;/p&gt;
&lt;p&gt;最近注册了一个edu.kg后缀的域名，打算当一把校长（doge，看看能不能过那些教育邮箱验证&lt;/p&gt;
&lt;p&gt;这类野鸡域名可能难过，不过可以试试，反正注册一个也没多少钱，实在不行就拿来自己玩了&lt;/p&gt;
&lt;p&gt;目前正在等待全球NS记录同步</summary>
      
    
    
    
    <category term="推广" scheme="https://blog.goodboyboy.top/categories/%E6%8E%A8%E5%B9%BF/"/>
    
    
    <category term="建校" scheme="https://blog.goodboyboy.top/tags/%E5%BB%BA%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>骑车去兜风~</title>
    <link href="https://blog.goodboyboy.top/posts/399226288.html"/>
    <id>https://blog.goodboyboy.top/posts/399226288.html</id>
    <published>2025-07-16T17:14:14.000Z</published>
    <updated>2025-07-16T17:14:14.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/js/APlayer.min.js"></script><script>var meting_api='https://meting.furwolf.com/api?server=:server&type=:type&id=:id&r=:r';</script><script src="https://jsd.foxsay.top/npm/@xizeyoupan/meting@latest/dist/Meting.min.js"></script><h2 id="前言">前言</h2><p>最近在学校都是三点一线，早上去寝室刷牙，白天在实验室，晚上去寝室洗个澡，然后回实验室睡觉。</p><p>感觉有点乏味，是时候出去散散心了</p><h2 id="骑车">骑车</h2><p>打算骑车去散散心，刚好最近新增了另一家共享电动车，电动车设计的更合理，比原来那几家多了手机槽，喇叭也是电喇叭，还有转向灯</p><p>原来那几家共享电动车真的可以划为单车范围了😂</p><p>电喇叭什么的其实都还好，我特别喜欢那个手机槽</p><p>以前用手机导航，只能用耳机连接手机，然后把手机揣口袋里，听着导航播报</p><p>高德有时候播报又特别抽象，时不时来一个“右前方”，还特别喜欢和右转一起播报，有时候我都走上直行道了，到路口给我说要右转，有时候我都右转了，给我说偏离路线。。。</p><p>现在听到“您已偏离路线，正在为您重新规划”这句话我就ptsd</p><p>而新的共享电动车，我就可以把手机放在手机槽里，看着导航开了😁</p><p>就在我解锁后，发现运营区域居然扩大了！！！</p><p>原来只能在河的西侧，现在把几乎是整个城市都包围了起来，我的活动范围大大扩张！！！</p><p>这不美美骑一下，直接高德导航到河东的运营区边缘😄</p><h2 id="散心">散心</h2><p>虽然湖南温度晚上也高，但是开着电动车吹着风还是很舒服的</p><p>过桥时发现对面山头风景还不错，随手拍了一张</p><p><img src="https://pic.goodboyboy.top/imgs/2025/07/17/26bb86.webp" alt="对面山头"></p><p><img src="https://pic.goodboyboy.top/imgs/2025/07/17/26q165.webp" alt="对面山头"></p><p><img src="https://pic.goodboyboy.top/imgs/2025/07/17/276w3y.webp" alt="对面山头"></p><p>听着歌吹着风，看看风景，还是很不错的😄</p><p>给大家分享一下骑车时听的歌，都超好听（加载播放器可能需要一点时间，部分歌要VIP就通过歌名分享）</p><p><meting-js server="tencent" type="song" id="002TumlS3yOwI0" preload='metadata'></meting-js></p><p><meting-js server="tencent" type="song" id="002v8w8L1v9LSO" preload='metadata'></meting-js></p><p><meting-js server="tencent" type="song" id="004a6DUO2Y2SRR" preload='metadata'></meting-js></p><p><meting-js server="tencent" type="song" id="003bmTHj24lyWd" preload='metadata'></meting-js></p><p><meting-js server="tencent" type="song" id="000OSYm83BW7Bw" preload='metadata'></meting-js></p><p><meting-js server="tencent" type="song" id="0028rrdN4EwxZW" preload='metadata'></meting-js></p><p><meting-js server="tencent" type="song" id="001kwvcn1pg6Wh" preload='metadata'></meting-js></p><p>VIP歌曲：</p><ul><li>歌曲名：面会菜，歌手名：林生祥，专辑名：大佛普拉斯 电影配乐</li><li>歌曲名：空白，歌手名：王舜禾，专辑名：伍六七之暗影宿命 原声大碟</li><li>歌曲名：时光盲盒，歌手名：ChiliChill，专辑名：2021哔哩哔哩拜年纪</li><li>歌曲名：虫儿飞，风儿吹，歌手名：小蓝背心，专辑名：百啭千声</li><li>歌曲名：天命 The Chosen One (feat.William Wu)，歌手名：且听东方/Ferkingge，专辑名：天命 The Chosen One (feat.William Wu)</li><li>歌曲名：武侯祠，歌手名：闫东炜，专辑名：天朝元素project</li><li>歌曲名：Black Myth: Wukong Main Theme (COVER版)，歌手名：Diego Mitre，专辑名：Black Myth: Wukong Main Theme (Cover)</li><li>歌曲名：以梦为马，歌手名：熊猫堂ProducePandas，专辑名：大惊小怪</li><li>歌曲名：淋雨一直走，歌手名：张韶涵，专辑名：有形的翅膀</li></ul><h2 id="返回">返回</h2><p>返回的时候不打算原路返回，打算围着运营区边缘绕着回去。</p><p>相较于河东这边的窄公路，还是绕城的大路骑起来更爽😁</p><p>下面是过另一座桥时拍的夜晚风景</p><p><img src="https://pic.goodboyboy.top/imgs/2025/07/17/2ax3i8.webp" alt="夜晚风景"></p><p>中途在一个立交桥下还遇到了卖臭豆腐的小摊（走不动路了）</p><p>停下来买了份臭豆腐，不过当时时间有点晚了，要赶着回寝室洗澡（十一点半要关门），就直接挂在车上</p><p>开了一会后发现车摇来摇去容易撒，只好停在一个垃圾桶旁边吃（偷感超重😂）</p><p>最难蚌的是，我选的这个地方明明很隐蔽，为啥还有人会路过？？？</p><p>我当时是背着那几个人的，我明显看到他们几个路过我的时候还专门看了我几眼。。。怕不是被看成乞丐了🤣</p><p>吃完赶紧润，抓紧时间赶路，最后成功到达宿舍。</p><p>整个行程花了大概两个半消失，开了33公里，花了15.5，性价比还是蛮高的</p><p><img src="https://pic.goodboyboy.top/imgs/2025/07/17/2f5e5x.webp" alt="结算"></p><h2 id="后记">后记</h2><p>以后有空还可以多转转，活动范围变广了，又有新的区域可以探索了😀</p>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;/js/APlayer.min.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
var meting_api=&#39;https://meting.furwolf.com/api?server=:server&amp;type=:type&amp;id=:id&amp;r=:r&#39;;
&lt;</summary>
      
    
    
    
    <category term="生活" scheme="https://blog.goodboyboy.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="日常" scheme="https://blog.goodboyboy.top/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="生活" scheme="https://blog.goodboyboy.top/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="兜风" scheme="https://blog.goodboyboy.top/tags/%E5%85%9C%E9%A3%8E/"/>
    
    <category term="骑车" scheme="https://blog.goodboyboy.top/tags/%E9%AA%91%E8%BD%A6/"/>
    
  </entry>
  
  <entry>
    <title>OAuth2授权码、客户端凭证、PKCE、设备码授权流程详解</title>
    <link href="https://blog.goodboyboy.top/posts/3907798914.html"/>
    <id>https://blog.goodboyboy.top/posts/3907798914.html</id>
    <published>2025-07-15T04:49:21.000Z</published>
    <updated>2025-07-15T04:49:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><div class="note info flat"><p>本教程将结合Gemini 2.5 Pro来为各位进行讲解</p></div><p>OAuth 2.0 是一个行业标准的授权框架，它允许第三方应用程序在不获取用户凭证（如用户名和密码）的情况下，有限度地访问用户在某一网站上存储的私有资源。</p><p>OAuth 2.0 中的四个核心角色：</p><ul><li><p>资源所有者 (Resource Owner)：通常是终端用户，拥有受保护资源的最终控制权。</p></li><li><p>客户端 (Client)：希望访问资源所有者受保护资源的第三方应用程序。</p></li><li><p>授权服务器 (Authorization Server)：负责验证资源所有者的身份，并在获得资源所有者授权后，向客户端颁发访问令牌（Access Token）。</p></li><li><p>资源服务器 (Resource Server)：存储受保护资源，并接受和验证访问令牌，以允许客户端访问资源。</p></li></ul><h2 id="授权码模式-Authorization-Code-Grant">授权码模式 (Authorization Code Grant)</h2><p>这是功能最完善、安全性最高的授权模式，因为需要保持client_secret非公开，推荐用于传统的 Web 应用（即拥有后端的应用）。</p><blockquote><p>下文的<code>客户端</code>包括客户端的前端与后端，资源所有者一般为用户</p></blockquote><pre><code class="highlight mermaid">sequenceDiagram    participant ResourceOwner as 资源所有者    participant Client as 客户端    participant AuthServer as 授权服务器    participant ResourceServer as 资源服务器    ResourceOwner-&gt;&gt;Client: 1. 访问客户端    Client--&gt;&gt;ResourceOwner: 2. 返回授权链接    ResourceOwner-&gt;&gt;AuthServer: 3. 通过链接访问授权页面    AuthServer--&gt;&gt;ResourceOwner: 4. 展示授权界面    ResourceOwner-&gt;&gt;AuthServer: 5. 确认授权    AuthServer-&gt;&gt;Client: 6. 重定向回调（携带code）    Client-&gt;&gt;AuthServer: 7. 发送code + client_secret请求token    AuthServer--&gt;&gt;Client: 8. 返回access_token    Client-&gt;&gt;ResourceServer: 9. 携带access_token请求资源    ResourceServer--&gt;&gt;Client: 10. 返回受保护资源    note left of ResourceOwner: 用户操作流    note right of AuthServer: 安全校验：    note right of AuthServer: - 验证code有效性&lt;br/&gt;- 验证client_secret&lt;br/&gt;- 检查重定向URI</code></pre><h3 id="发起授权请求">发起授权请求</h3><p>当用户使用客户端时，客户端需要发起授权请求。</p><p>该请求实际由用户发起，客户端负责构建一个包含<code>client_id</code>、<code>redirect_uri</code>、<code>response_type</code> 和<code>scope</code>等参数的URL授权请求链接：</p><p><code>Base URL</code>：授权服务器的授权Endpoint，例如<code>https://xxx.com/api/authorize</code><br><code>response_type</code>：<code>code</code><br><code>client_id</code>：客户端ID<br><code>redirect_uri</code>：回调URL<br><code>scope</code>：资源（权限）范围，例如<code>openid</code>、<code>email</code>、<code>profile</code>等<br><code>state</code>：随机字符，可选（推荐），用于防止跨站请求伪造（CSRF）攻击</p><p>例如：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /authorize?response_type=code&amp;client_id=CLIENT_ID&amp;redirect_uri=CALLBACK_URL&amp;scope=SCOPE</span><br></pre></td></tr></table></figure><h3 id="确认授权">确认授权</h3><p>用户定向到授权链接，如果此时用户未登录，则会要求用户进行登录</p><p>登录完成后，授权服务器会展示本次授权请求相关信息，例如客户端的详情，请求的资源内容等</p><p>如果用户确认授权，则重定向至redirect_uri（上文示例中的CALLBACK_URL内容）并在URL参数中携带本次确认授权的 AUTHORIZATION_CODE</p><blockquote><p>Tips：正常情况下，授权服务器会对redirect_uri的内容进行校验，确保当前授权链接中的redirect_uri内容与客户端在授权服务器注册时预留的redirect_uri内容一致，否则重定向至钓鱼链接会导致本次确认授权的 AUTHORIZATION_CODE 泄露</p></blockquote><h3 id="客户端请求access-token">客户端请求access_token</h3><p>客户端通过redirect_uri拿到本次授权的 AUTHORIZATION_CODE 后，使用 AUTHORIZATION_CODE 和 client_secret 向授权服务器请求 access_token</p><p>如果客户端启用了 state ，还会校验当前回调链接中的 state 值是否和当初授权链接中的 state 值一致，确保 AUTHORIZATION_CODE 仅用于本次授权请求会话，防止跨站请求伪造（CSRF）攻击</p><p>Base URL：授权服务器的令牌Endpoint，例如<code>https://xxx.com/api/token</code></p><p>客户端向Base URL发送POST请求，请求体<code>Content-Type</code>为<code>application/x-www-form-urlencoded</code>，请求体内容如下：</p><p><code>grant_type</code>：<code>authorization_code</code><br><code>code</code>：上文的 AUTHORIZATION_CODE<br><code>redirect_uri</code>：回调URL<br><code>client_id</code>：客户端ID<br><code>client_secret</code>：客户端Secret</p><div class="note warning flat"><p>client_secret不可直接暴露给客户端前端，必须由安全的客户端后端使用，否则任何人（包括攻击者）只需要拿到 AUTHORIZATION_CODE 即可向授权服务器发起access_token请求</p></div><h3 id="客户端请求资源">客户端请求资源</h3><p>当授权服务器返回access_token后，使用access_token向资源服务器请求所需要的资源</p><p>资源服务器对access_token进行一系列校验，确认身份后返回客户端所需要的资源</p><h2 id="客户端凭证模式-Client-Credentials-Grant">客户端凭证模式 (Client Credentials Grant)</h2><p>该模式适用于没有特定用户参与的场景，即客户端以自己的名义访问资源（例如，机器对机器的通信）。</p><p>因为没有用户参与，因此这里客户端可以直接向令牌Endpoint请求access_token</p><p>该模式需要具体参考授权服务器的文档，例如authentik身份识别基于服务账户，身份验证基于应用密码令牌（client_secret），因此还需要传递服务账户的username和password，这里仅示例通用情况。</p><h3 id="客户端请求access-token-2">客户端请求access_token</h3><p>Base URL：授权服务器的令牌Endpoint，例如<code>https://xxx.com/api/token</code></p><p>客户端向Base URL发送POST请求，请求体<code>Content-Type</code>为<code>application/x-www-form-urlencoded</code>，请求体内容如下：</p><p><code>grant_type</code>：<code>client_credentials</code><br><code>scope</code>：权限范围，具体参考授权服务器文档</p><p>请求头：</p><p><code>Authorization</code>：<code>Basic $&#123;将 client_id:client_secret 进行 Base64 编码后的字符串&#125;</code></p><p>当然也可以将客户端凭证放在请求体中：</p><p><code>grant_type</code>：<code>client_credentials</code><br><code>scope</code>：权限范围，具体参考授权服务器文档<br><code>client_id</code>：客户端ID<br><code>client_secret</code>：客户端Secret</p><h3 id="客户端请求资源-2">客户端请求资源</h3><p>当授权服务器返回access_token后，客户端使用access_token向资源服务器请求所需要的资源</p><p>资源服务器对access_token进行一系列校验，确认身份后返回客户端所需要的资源</p><h2 id="授权码-PKCE-Proof-Key-for-Code-Exchange-模式">授权码 + PKCE (Proof Key for Code Exchange)模式</h2><p>PKCE 是对授权码模式的增强，现在被认为是所有类型客户端（包括原生应用、单页应用和传统 Web 应用）的最佳实践。</p><p>核心思想：在授权请求时，客户端生成一个随机的验证器（<code>code_verifier</code>），并将其哈希值（<code>code_challenge</code>）发送给授权服务器。当客户端用授权码交换访问令牌时，必须同时提供原始的 <code>code_verifier</code>。授权服务器会验证 <code>code_verifier</code> 和 <code>code_challenge</code> 是否匹配，从而确保即使授权码被截获，攻击者也无法在没有 <code>code_verifier</code> 的情况下冒用。</p><pre><code class="highlight mermaid">sequenceDiagram    participant C as 客户端 (App)    participant U as 资源所有者    participant AS as 授权服务器    participant RS as 资源服务器    Note over C: 1. 生成 code_verifier, &lt;br/&gt;   计算 code_challenge    C-&gt;&gt;U: 2. 发起授权请求 (携带 code_challenge)    U-&gt;&gt;AS: 用户浏览器重定向至授权服务器    AS--&gt;&gt;U: 要求用户登录并授权    U-&gt;&gt;AS: 同意授权    AS--&gt;&gt;C: 4. 重定向并返回授权码 (code)    Note over C: 截获此处的 code 也无用，&lt;br/&gt;因为攻击者没有 code_verifier    C-&gt;&gt;AS: 5. 交换令牌请求 &lt;br/&gt;(携带 code 和 code_verifier)    Note over AS: 6. 验证 code_verifier 和 &lt;br/&gt;   之前存储的 code_challenge 是否匹配    AS--&gt;&gt;C: 验证通过，返回 Access Token    C-&gt;&gt;RS: 7. 使用 Access Token 请求资源    RS--&gt;&gt;C: 返回受保护的资源</code></pre><h3 id="发起授权请求-2">发起授权请求</h3><p>客户端首先生成一个随机的 <code>code_verifier</code>，将这个 <code>code_verifier</code> 存储在本地（例如，App 的内存或浏览器的 <code>sessionStorage</code> 中），根据 <code>code_verifier</code> 计算出对应的 <code>code_challenge</code>。</p><div class="note warning flat"><p><code>code_challenge</code>由<code>code_verifier</code>先按照<code>code_challenge_method</code>进行计算，然后进行<code>Base64URL</code>编码</p></div><p>然后构建授权请求链接：</p><p><code>Base URL</code>：授权服务器的授权Endpoint，例如<code>https://xxx.com/api/authorize</code><br><code>response_type</code>：<code>code</code><br><code>client_id</code>：客户端ID<br><code>redirect_uri</code>：回调URL<br><code>scope</code>：资源（权限）范围，例如<code>openid</code>、<code>email</code>、<code>profile</code>等<br><code>state</code>：随机字符，可选（推荐），用于防止跨站请求伪造（CSRF）攻击<br><code>code_challenge</code>：第一步通过code_verifier计算出的code_challenge<br><code>code_challenge_method</code>：<code>S256</code>（具体看授权服务器的支持类型）</p><p>授权服务器收到请求后，会存储 code_challenge 并将其与即将生成的授权码关联起来。</p><h3 id="确认授权-2">确认授权</h3><p>用户在授权服务器的页面上登录，并同意授权给客户端。</p><p>然后重定向至redirect_uri，并附带<code>code</code>与<code>state</code>内容</p><h3 id="客户端请求access-token-3">客户端请求access_token</h3><p>与标准的授权码模式相比，请求体中必须额外包含第一步生成的<code>code_verifier</code></p><p>Base URL：授权服务器的令牌Endpoint，例如<code>https://xxx.com/api/token</code></p><p>客户端向Base URL发送POST请求，请求体<code>Content-Type</code>为<code>application/x-www-form-urlencoded</code>，请求体内容如下：</p><p><code>grant_type</code>：<code>authorization_code</code><br><code>code</code>：上文的返回的code<br><code>redirect_uri</code>：回调URL<br><code>client_id</code>：客户端ID<br><code>code_verifier</code>：第一步生成的code_verifier</p><p>收到请求后，授权服务器计算<code>code_verifier</code>在使用算法（S256）后是否与开始提供的<code>code_challenge</code>一致，一致则下发<code>access_token</code>。</p><h3 id="客户端请求资源-3">客户端请求资源</h3><p>当授权服务器返回access_token后，客户端使用access_token向资源服务器请求所需要的资源</p><p>资源服务器对access_token进行一系列校验，确认身份后返回客户端所需要的资源。</p><h2 id="设备码流程-Device-Code-Flow">设备码流程 (Device Code Flow)</h2><p>设备码流程（Device Code Flow）非常巧妙地解决了那些没有浏览器或输入不方便的设备（比如智能电视、游戏机、命令行工具、树莓派等）如何进行 OAuth 2.0 授权的问题。</p><p>整个流程的核心思想是：<strong>在输入受限的设备上发起授权，然后在另一个功能齐全的设备（如手机或电脑）上完成授权确认</strong>。</p><pre><code class="highlight mermaid">sequenceDiagram    participant TV as 客户端设备 (智能电视)    participant User as 用户    participant AS as 授权服务器    participant Phone as 授权设备 (手机)    TV-&gt;&gt;AS: 请求设备码和用户码    AS--&gt;&gt;TV: 返回 device_code, user_code 等    TV-&gt;&gt;User: 显示 user_code 和验证网址    User-&gt;&gt;Phone: 在手机上访问网址    Phone-&gt;&gt;AS: 提交 user_code 并登录授权    Note over TV, AS: 设备在后台持续轮询, 直到用户授权成功    AS--&gt;&gt;TV: (轮询成功后) 返回 Access Token    TV-&gt;&gt;User: 显示登录成功</code></pre><h3 id="设备发起授权请求">设备发起授权请求</h3><p>设备向授权服务器的一个特定端点——设备授权端点（Device Authorization Endpoint）发起POST请求，</p><p>Base URL：授权服务器的设备授权Endpoint，例如<code>https://xxx.com/api/device_authorization</code></p><p>请求体<code>Content-Type</code>为<code>application/x-www-form-urlencoded</code>，请求体内容如下：</p><p><code>client_id</code>：客户端ID<br><code>scope</code>：资源（权限）范围，例如<code>openid</code>、<code>email</code>、<code>profile</code>等</p><p>授权服务器将返回临时凭证</p><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;device_code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GmRhmhtR4Q1d74VklbV_g9s-265aKqrC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;user_code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;WDJB-MJHT&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;verification_uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://example.com/activate&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;verification_uri_complete&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://example.com/activate?user_code=WDJB-MJHT&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;expires_in&quot;</span><span class="punctuation">:</span> <span class="number">1800</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;interval&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>device_code</code>：设备代码，是保存在设备上的代码<br><code>verification_uri</code>：显示给最终用户以输入代码的 URL<br><code>verification_uri_complete</code>：与上述相同的 URL，不同之处在于代码已被预填充，用户无需再输入代码<br><code>user_code</code>：最终用户输入的原始代码<br><code>expires_in</code>：此令牌将在多少秒后过期<br><code>interval</code>：设备应多久检查一次令牌状态的时间间隔（以秒为单位）</p><h3 id="设备端显示信息并开始轮询">设备端显示信息并开始轮询</h3><p>设备开始向用户展示<code>verification_uri</code>与<code>user_code</code>并引导用户访问该网址，填写代码</p><blockquote><p>感觉和HMCL的登录MC正版账户流程很像啊</p></blockquote><p>然后设备开始轮询，按照建议的<code>interval</code>，持续向授权服务器的令牌Endpoint发起POST请求。</p><p>请求体<code>Content-Type</code>同样为<code>application/x-www-form-urlencoded</code>，请求体内容如下：</p><p><code>grant_type</code>：<code>urn:ietf:params:oauth:grant-type:device_code</code>（设备码流程专用）<br><code>device_code</code>：上文的device_code<br><code>client_id</code>：客户端ID</p><div class="note info flat"><p>需要注意的是，部分授权服务器返回的device_code过于抽象（说的就是你authentik），可能会内嵌部分需要转义的字符，因此返回的device_code内容是已经加了<code>\</code>转义符的，但是该转义符不属于device_code内容，如果设备对于发出请求的内容自带转义将会使<code>\</code>也被提交，导致出现<code>invalid_grant</code>错误！</p></div><h3 id="确认授权-3">确认授权</h3><p>用户访问展示的<code>verification_uri</code>，并填入<code>user_code</code>，在授权页面确认授权</p><p>当然也可以直接展示<code>verification_uri_complete</code></p><h3 id="设备获取access-token">设备获取access_token</h3><p>在用户同意授权后，下一次轮询将获得授权服务器下发的access_token</p><h3 id="设备请求资源">设备请求资源</h3><p>当授权服务器返回access_token后，设备使用access_token向资源服务器请求所需要的资源</p><p>资源服务器对access_token进行一系列校验，确认身份后返回客户端所需要的资源。</p><h2 id="总结">总结</h2><p>隐式授权模式和密码凭证模式这两个不安全的模式就不写了。</p><table><thead><tr><th>授权模式</th><th>适用场景</th><th>安全性</th><th>推荐度</th></tr></thead><tbody><tr><td>授权码 + PKCE</td><td>所有类型的应用，特别是公共客户端（SPA、移动应用）和机密客户端（Web应用）</td><td>非常高</td><td>强烈推荐</td></tr><tr><td>授权码模式</td><td>有后端的 Web 应用（机密客户端）</td><td>高</td><td>推荐</td></tr><tr><td>客户端凭证模式</td><td>机器对机器（M2M）通信，无用户参与</td><td>高</td><td>推荐</td></tr><tr><td>设备码流程</td><td>无浏览器或输入受限的设备</td><td>中高</td><td>特定场景推荐</td></tr><tr><td>隐式授权模式</td><td>已废弃</td><td>低</td><td>不推荐</td></tr><tr><td>密码凭证模式</td><td>已废弃，仅用于高度信任的遗留系统</td><td>非常低</td><td>不推荐</td></tr></tbody></table><h2 id="后记">后记</h2><p>暑假意外的高产😁</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;本教程将结合Gemini 2.5 Pro来为各位进行讲解&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;OAuth 2.0 是一个行业标准的授权框架，它允许第三方应用程序在不获取用户凭证（如用户名</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.goodboyboy.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Web" scheme="https://blog.goodboyboy.top/categories/Web/"/>
    
    
    <category term="OAuth2" scheme="https://blog.goodboyboy.top/tags/OAuth2/"/>
    
  </entry>
  
  <entry>
    <title>基于OIDC实现Authentik与阿里云RAM角色的联合身份认证</title>
    <link href="https://blog.goodboyboy.top/posts/3489051457.html"/>
    <id>https://blog.goodboyboy.top/posts/3489051457.html</id>
    <published>2025-07-13T17:22:59.000Z</published>
    <updated>2025-07-13T17:22:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>OIDC的教程来了😁</p><p>在阿里云，OIDC一般不用于登录WEB控制台，而是用于程序化访问，例如CLI、SDK或自定义应用程序，工作流程完全由API驱动，不过可以通过构造免登录URL来进行登录。</p><div class="note info flat"><p>OIDC 复杂很多，这里仅按照最基础的能完成授权的流程写，具体项目请根据具体实际情况设置。<br>部分Authentik操作这里不详细写了，可以去看看之前写的<a href="/posts/3780326479.html">阿里云角色SSO对接authentik进行单点登录</a></p></div><h2 id="创建-Authentik-Provider">创建 Authentik Provider</h2><p>在Authentik的控制台侧边栏<code>Applications</code>-&gt;<code>Providers</code>中创建provider，类型选<code>OAuth2/OpenID Provider</code></p><p><code>名称</code>：自填<br><code>授权流程</code>：自选或者自定义</p><p><code>客户端 ID</code>和<code>客户端 Secret</code>自动生成，记不记无所谓，后面也看得到</p><p><code>重定向 URI/Origin（正则）</code>：这里因为并不需要使用到重定向，填个<code>http://localhost</code>就行</p><p><code>签名密钥</code>：这里用Authentik默认的或者自己生成都行，生成操作看之前的文章</p><p>在<code>高级协议设置</code>里</p><p><code>作用域</code>：同样是先不用管，待会再回来映射</p><p>然后点击完成创建。</p><h2 id="创建-Authentik-Application">创建 Authentik Application</h2><div class="note info flat"><p>下方有一处勘误，已修改</p></div><p><s>其实OIDC创不创建都无所谓，没啥用，不是授权入口，只是创建一个provider不会显示警告而已</s></p><p>这里可以通过给application授权指定组来实现权限控制（当然你也可以自己写策略），非该组内用户访问会出现<code>Request has been denied.</code></p><p>如果不做权限控制，任何人都可以通过构造认证链接发起请求</p><p>在同级菜单下的<code>Applications</code>中点击<code>创建</code>，<code>名称</code>、<code>slug</code>随便取，用不到</p><p>提供程序选择刚刚创建的provider即可</p><h2 id="创建身份提供商">创建身份提供商</h2><p>打开阿里云控制台，进入<a href="https://ram.console.aliyun.com/">RAM 访问控制</a></p><p>找到<code>集成管理</code>-&gt;<code>SSO管理</code></p><p>选择<code>角色SSO</code>，<code>OIDC</code></p><p><code>身份提供商名称</code>：顾名思义，按照下面灰色字要求填就行</p><p>然后回到Authentik，点击创建的provider，可以在右边看到一系列URL以及左边的<code>客户端 ID</code></p><p>这里我们需要<code>客户端 ID</code>以及<code>OpenID 配置颁发者</code>的值</p><p>回到阿里云，<code>颁发者 URL</code>填写<code>OpenID 配置颁发者</code>的值，<code>客户端 ID</code>就填<code>客户端 ID</code>的值</p><p>填完后会有个<code>获取指纹</code>按钮，这个获取的是你OIDC Endpoint的SSL证书的CA的指纹，正式环境请仔细对比</p><p>完成创建即可</p><h2 id="创建角色">创建角色</h2><p>和前面那篇文章一样，想要扮演什么角色就创建什么角色，角色创建这里不重复写了，详情参考前面的文章，只是在<code>身份提供商类型</code>选项那里从SAML换成OIDC即可</p><p>然后选择刚刚创建的身份提供商</p><p>完成创建后会自动生成好信任策略，当然如果你有自定义的验证需求，可以自定义，这里就采用默认</p><h2 id="添加映射">添加映射</h2><p>阿里云要求Id Token中包含<code>aud</code>和<code>iss</code></p><p><code>aud</code>：客户端ID的值<br><code>iss</code>：颁发者 URL（OpenID 配置颁发者）的值</p><p>来到Authentik的<code>Customization</code>-&gt;<code>Property Mappings</code>，创建两个map用来映射这俩值，类型都选择<code>Scope Mapping</code></p><p><code>名称</code>：自填<br><code>作用域名称</code>：aud或者iss<br><code>表达式</code>：python语言，我这里为了简单就直接返回了这俩值，自己可以根据官方文档表达式章节自定义怎么返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#xxx为返回的值</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;xxxxxxxxxxx&quot;</span></span><br></pre></td></tr></table></figure><p>然后回到provider，编辑一下，在作用域中将自定义的两个map添加进去，默认的openid和email什么的可以留着</p><h2 id="小插曲：大致流程">小插曲：大致流程</h2><p>从Authentik获取Id Token，用Id Token在阿里云拿到STS Token，然后用STS Token换SigninToken，用SigninToken进行登录</p><h2 id="获取Id-Token">获取Id Token</h2><p>这里就是标准的OAuth2流程，本教程采用Authorization code授权流程，其他流程请自行探索</p><p>首先构造授权请求页面URL</p><p>在provider中可以看到<code>授权 URL</code></p><p>这个就是Base Url</p><p>给Base Url拼接下面几个参数</p><div class="note info flat"><p>下方有一处勘误，已修改</p></div><p><code>response_type</code>：固定值<code>code</code>（为Authorization code授权流程的固定值）<br><code>client_id</code>：顾名思义，客户端ID<br><code>redirect_uri</code>：和创建provider时填的保持一致，上文填的是<code>http://localhost</code>这里就拼这个值<br><code>state</code>：~~防重放攻击的，可选，~~防止跨站请求伪造攻击，自己去查阅相关资料</p><p>拼接完成后访问该url即进入授权页面，完成登录后页面将重定向到redirect_uri所填的值</p><p>这里就是<code>http://localhost</code>，后面会接<code>code</code>和<code>state</code>，这里我们需要使用code来换取Id Token</p><p>这里就需要使用POST请求，请求地址在provider中可以看到，名叫<code>令牌 URL</code></p><p>然后向该地址POST如下参数</p><blockquote><p>Tips：Content-Type 必须是 application/x-www-form-urlencoded</p></blockquote><p><code>grant_type</code>：该流程中为<code>authorization_code</code><br><code>code</code>：上面的code值<br><code>redirect_uri</code>：同理，之前填的redirect_uri值<br><code>client_id</code>：客户端ID<br><code>client_secret</code>：客户端 Secret（编辑一下provider就看得到了）</p><p>发起POST请求后，会返回一个json，包含<code>access_token</code>，和<code>id_token</code></p><p>正常情况下我们会需要使用<code>access_token</code>，而<code>id_token</code>是给本地客户端用的，但是这里阿里云正是需要鉴别用户身份，因此需要使用Id Token而不是access_token</p><h2 id="获取STS-Token">获取STS Token</h2><p>这里暂时没找到阿里云的Endpoint，貌似只用用阿里云的SDK请求？</p><p>文档-&gt;<a href="https://help.aliyun.com/zh/ram/developer-reference/api-sts-2015-04-01-assumerolewithoidc">AssumeRoleWithOIDC - OIDC角色SSO时获取扮演角色的临时身份凭证</a></p><p>文档里面有个调试按钮，可以方便进行请求</p><p><code>OIDCProviderArn</code>和<code>RoleArn</code>文档也写了在哪看，找不到也可以去看看之前的那篇文章</p><p><code>OIDCToken</code>就是上文的<code>Id Token</code></p><p><code>RoleSessionName</code>用来让阿里云记录是谁在访问，用于日志审计，可以填用户邮箱之类的</p><p>然后就是发起调用</p><p>返回示例阿里云文档里有，这里就不展示了</p><h2 id="获取SigninToken">获取SigninToken</h2><p>这里同样是构造URL</p><p>Base Url为：<a href="https://signin.aliyun.com/federation">https://signin.aliyun.com/federation</a></p><p>拼接下面参数：</p><p><code>Action</code>：固定值<code>GetSigninToken</code><br><code>AccessKeyId</code>、<code>AccessKeySecret</code>、<code>SecurityToken</code>：上文返回的json里有</p><p>发起Get请求后就会返回一个包含SigninToken的json</p><h2 id="拼接免登录URL">拼接免登录URL</h2><p>Base URL同样是<a href="https://signin.aliyun.com/federation">https://signin.aliyun.com/federation</a></p><p>拼接下面参数：</p><p><code>Action</code>：固定值<code>Login</code><br><code>LoginUrl</code>：登录失效跳转的地址<br><code>Destination</code>：实际要访问的目标页面<br><code>SigninToken</code>：上文json中</p><blockquote><p>Tips：LoginUrl、Destination 和 SigninToken 都需要使用 encodeURL 进行编码处理</p></blockquote><p>访问该拼接的URL即可进入Web控制台</p><h2 id="后记">后记</h2><p>一般获取到STS Token后就可以对阿里云资源进行操作了，只是说要登录的话需要多一步获取SigninToken</p><p>终于是写完了，累死我了。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;OIDC的教程来了😁&lt;/p&gt;
&lt;p&gt;在阿里云，OIDC一般不用于登录WEB控制台，而是用于程序化访问，例如CLI、SDK或自定义应用程序，工作流程完全由API驱动，不过可以通过构造免登录URL来进行登录。&lt;/p&gt;
&lt;div clas</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.goodboyboy.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Web" scheme="https://blog.goodboyboy.top/categories/Web/"/>
    
    
    <category term="阿里云" scheme="https://blog.goodboyboy.top/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    <category term="OIDC" scheme="https://blog.goodboyboy.top/tags/OIDC/"/>
    
    <category term="Authentik" scheme="https://blog.goodboyboy.top/tags/Authentik/"/>
    
    <category term="RAM" scheme="https://blog.goodboyboy.top/tags/RAM/"/>
    
  </entry>
  
  <entry>
    <title>GitHub release以及Git Commit常用模板</title>
    <link href="https://blog.goodboyboy.top/posts/40686844.html"/>
    <id>https://blog.goodboyboy.top/posts/40686844.html</id>
    <published>2025-07-13T08:00:21.000Z</published>
    <updated>2025-07-13T08:00:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>最近发现Lobe Chat的Commit和Release内容都很美观，找Gemini要了个模板过来。</p><h2 id="Git-Commit-模板">Git Commit 模板</h2><p>结构：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;emoji&gt; &lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure><p>常用Emoji与类型：</p><table><thead><tr><th>Emoji</th><th>类型(<code>type</code>)</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>✨</td><td>feat</td><td>新增功能 (A new feature)</td><td>✨ feat(api): 新增用户注册接口</td></tr><tr><td>🐛</td><td>fix</td><td>修复 Bug (A bug fix)</td><td>🐛 fix(payment): 修复微信支付回调失败的问题</td></tr><tr><td>📝</td><td>docs</td><td>仅修改文档 (Documentation only changes)</td><td>📝 docs(readme): 更新项目介绍和安装指南</td></tr><tr><td>💄</td><td>style</td><td>代码格式调整，不影响代码逻辑 (A code style update)</td><td>💄 style(lint): 调整 ESLint 规则并格式化所有 .js 文件</td></tr><tr><td>♻️</td><td>refactor</td><td>代码重构，既不是修复 bug 也不是新增功能</td><td>♻️ refactor(user): 重构用户认证模块，提升性能</td></tr><tr><td>⚡️</td><td>perf</td><td>提升性能的改动 (A code change that improves performance)</td><td>⚡️ perf(image): 优化图片加载速度，采用懒加载</td></tr><tr><td>✅</td><td>test</td><td>增加或修改测试 (Adding missing tests or correcting existing tests)</td><td>✅ test(utils):为日期格式化函数增加单元测试</td></tr><tr><td>🔨</td><td>build</td><td>影响构建系统或外部依赖的更改</td><td>🔨 build(deps): 升级 webpack 到 v5</td></tr><tr><td>⚙️</td><td>ci</td><td>更改 CI 配置文件和脚本</td><td>⚙️ ci(github): 优化 GitHub Actions 的构建流程</td></tr><tr><td>🧹</td><td>chore</td><td>其他不修改 src 或 test 文件的更改</td><td>🧹 chore(release): 准备 v1.2.0 版本发布</td></tr><tr><td>⏪️</td><td>revert</td><td>回滚一个之前的 commit</td><td>⏪️ revert(feat): 回滚上次的用户权限更新</td></tr><tr><td>🚀</td><td>deploy</td><td>部署相关</td><td>🚀 deploy(prod): 部署 v2.0.0 到生产环境</td></tr><tr><td>🚧</td><td>wip</td><td>工作进行中 (Work in progress)</td><td>🚧 wip(search): 搜索功能初步实现，请勿合并</td></tr><tr><td>🎉</td><td>release</td><td>发布新版本</td><td>🎉 release: v3.0.0</td></tr><tr><td>⬆️</td><td>upgrade</td><td>升级依赖 (Upgrade dependencies)</td><td>⬆️ upgrade(react): 升级 React 到 v18</td></tr><tr><td>⬇️</td><td>downgrade</td><td>降级依赖 (Downgrade dependencies)</td><td>⬇️ downgrade(lodash): 降级 lodash 解决兼容性问题</td></tr></tbody></table><h3 id="示例">示例</h3><p>一个简单的修复:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🐛 fix(header): 修复移动端视图下导航栏溢出的问题</span><br></pre></td></tr></table></figure><p>一个包含详细描述的新功能:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">✨ feat(profile): 新增用户个人资料编辑页面</span><br><span class="line"></span><br><span class="line">- 用户现在可以上传头像、修改昵称和个人简介。</span><br><span class="line">- 增加了输入验证，确保数据的有效性。</span><br><span class="line"></span><br><span class="line">Closes #123</span><br></pre></td></tr></table></figure><h2 id="Release-模板">Release 模板</h2><p>结构:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 🎉 Release v[版本号] - [发布日期]</span></span><br><span class="line"></span><br><span class="line">[这里可以写一段简短的发布介绍，比如 &quot;我们很高兴地宣布 XX 版本的发布！本次更新带来了期待已久的新功能并修复了若干重要问题。&quot;]</span><br><span class="line"></span><br><span class="line"><span class="section">## ✨ 新功能 (Features)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 新增用户注册功能，现在可以通过邮箱或手机号注册 (#101)</span><br><span class="line"><span class="bullet">-</span> 增加了全新的仪表盘页面，提供数据可视化图表 (#105)</span><br><span class="line"><span class="bullet">-</span> 支持通过 OAuth2 与 Google 账户集成登录 (#112)</span><br><span class="line"></span><br><span class="line"><span class="section">## 🐛 Bug 修复 (Bug Fixes)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 修复了在 Safari 浏览器中日期选择器无法弹出的问题 (#98)</span><br><span class="line"><span class="bullet">-</span> 解决了特定场景下可能导致内存泄漏的 Bug (#102)</span><br><span class="line"><span class="bullet">-</span> 修正了 API 文档中一个错误的参数示例 (#108)</span><br><span class="line"></span><br><span class="line"><span class="section">## ♻️ 重构与优化 (Refactoring &amp; Performance)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 重构了支付模块，提升了代码可维护性 (#95)</span><br><span class="line"><span class="bullet">-</span> 优化了首页的加载性能，首次渲染时间减少 30% (#100)</span><br><span class="line"><span class="bullet">-</span> 升级了数据库查询逻辑，响应速度更快 (#110)</span><br><span class="line"></span><br><span class="line"><span class="section">## 📝 文档 (Documentation)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 更新了 <span class="code">`README.md`</span> 文件，包含了最新的安装和使用指南 (#97)</span><br><span class="line"><span class="bullet">-</span> 增加了贡献指南 <span class="code">`CONTRIBUTING.md`</span> (#99)</span><br><span class="line"></span><br><span class="line"><span class="section">## 🔨 构建与依赖 (Build &amp; Dependencies)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 将项目依赖的 Node.js 版本升级至 v20 (#115)</span><br><span class="line"><span class="bullet">-</span> 引入了 <span class="code">`Vite`</span> 作为新的构建工具，大幅提升开发服务器启动速度 (#120)</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="section">### ❤️ 贡献者 (Contributors)</span></span><br><span class="line"></span><br><span class="line">感谢以下所有为这个版本做出贡献的开发者！</span><br><span class="line"></span><br><span class="line">[<span class="string">@username1</span>](<span class="link">https://github.com/username1</span>)</span><br><span class="line">[<span class="string">@username2</span>](<span class="link">https://github.com/username2</span>)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近发现Lobe Chat的Commit和Release内容都很美观，找Gemini要了个模板过来。&lt;/p&gt;
&lt;h2 id=&quot;Git-Commit-模板&quot;&gt;Git Commit 模板&lt;/h2&gt;
&lt;p&gt;结构：&lt;/p&gt;
&lt;figure c</summary>
      
    
    
    
    <category term="笔记" scheme="https://blog.goodboyboy.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Git" scheme="https://blog.goodboyboy.top/categories/Git/"/>
    
    
    <category term="GitHub" scheme="https://blog.goodboyboy.top/tags/GitHub/"/>
    
    <category term="Git" scheme="https://blog.goodboyboy.top/tags/Git/"/>
    
    <category term="Git Commit" scheme="https://blog.goodboyboy.top/tags/Git-Commit/"/>
    
  </entry>
  
  <entry>
    <title>实验室生活</title>
    <link href="https://blog.goodboyboy.top/posts/2116962076.html"/>
    <id>https://blog.goodboyboy.top/posts/2116962076.html</id>
    <published>2025-07-13T03:20:20.000Z</published>
    <updated>2025-07-13T03:20:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>今年暑假不想回去，一是一开始有个市政府实习（虽然最后被鸽了），二是路费太贵，坐动车即使是学生票来回一次也要300多（绿皮太折磨人了，不坐），三是回家其实也不知道干什么，高中的同学基本上只有几个有联系了，四是听我一个实验室的室友留校就在原寝室，不用搬寝，所以这个暑假打算留校。</p><h2 id="申请">申请</h2><p>原则上是学校是不允许留校的，但是实验室的同学因为经常有比赛，所以可以申请留校</p><p>借着这个机会，我也申请留校（doge</p><h2 id="变故">变故</h2><p>不知道学校哪根筋抽了，今年暑假留校要搬寝室。。。</p><p>我又不习惯和不认识的人住一起（虽然后来是自己拉人组寝室）</p><p>最主要的是，东西实在是懒得搬，特别是湖南这几天的天气，要是搬个被子怕不是要热死，而且开学还要换回来</p><p>有几个留校的同学已经跑路回家了😂</p><p>想了一下，还是七月底再跑路吧 ，毕竟刚开始留校就跑路还是不怎么好（doge</p><h2 id="安排">安排</h2><p>睡是不可能一起睡的，我就把衣服裤子和洗漱用品打包扔到了新寝室，日常用的电子设备和要看的书扔到了实验室。</p><p>刚好有个研究生学长暑假要回去了，他的那台显示器借给我用，我就不用搬显示器了</p><p>平常白天蹭实验室空调（寝室开空调还蛮贵的），在实验室学习，晚上在新寝室洗个澡，然后回实验室睡觉</p><p>第二天早上回新寝室洗脸刷牙一下，再润回实验室。</p><p>实验室有个不知道是谁的折叠床，虽然睡起来没有寝室的床舒服，但也勉强能过日子。</p><p>以前听闻ACM组有同学在实验室起来就写算法，写累了就睡，睡完起来继续写，一天起居都在实验室，现在自己也是过上差不多的这种日子了😂（不过没这么抽象罢了）</p><h2 id="后记">后记</h2><p>还是在家里舒服（泪目</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;今年暑假不想回去，一是一开始有个市政府实习（虽然最后被鸽了），二是路费太贵，坐动车即使是学生票来回一次也要300多（绿皮太折磨人了，不坐），三是回家其实也不知道干什么，高中的同学基本上只有几个有联系了，四是听我一个实验室的室友留校就在</summary>
      
    
    
    
    <category term="生活" scheme="https://blog.goodboyboy.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="日常" scheme="https://blog.goodboyboy.top/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="实验室" scheme="https://blog.goodboyboy.top/tags/%E5%AE%9E%E9%AA%8C%E5%AE%A4/"/>
    
  </entry>
  
  <entry>
    <title>阿里云角色SSO对接authentik进行单点登录</title>
    <link href="https://blog.goodboyboy.top/posts/3780326479.html"/>
    <id>https://blog.goodboyboy.top/posts/3780326479.html</id>
    <published>2025-07-11T14:26:41.000Z</published>
    <updated>2025-07-11T14:26:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>好久没写一篇正经的教程文章了，今天来写如何让authentik对接阿里云的角色SSO，实现单点登录指定角色</p><p>本质上任何支持SAML的第三方IAM都能完成，只不过大同小异，本教程采用authentik进行示例。</p><div class="note info flat"><p>本教程结合Gemini 2.5 Pro+Deep Research完成，截稿时间：2025-07-11</p></div><h2 id="正文">正文</h2><h3 id="战略价值">战略价值</h3><div class="note info flat"><p>下面为Gemini套话，可以跳过不看</p></div><p>将 Authentik 作为身份提供商（IdP）与阿里云进行集成，不仅仅是技术上的对接，更是一项具有深远战略意义的举措，旨在构建一个现代化、安全且高效的身份管理体系。其核心价值主要体现在以下几个方面：</p><ul><li><p>集中式身份管理：将 Authentik 作为唯一的身份“真理之源”（Single Source of Truth），企业可以在一个统一的平台上管理所有用户的身份、凭证及其生命周期 。这意味着无需在阿里云 RAM 中创建和维护大量的独立 IAM 用户及其静态密码或访问密钥，极大地简化了管理复杂性。</p></li><li><p>增强的安全态势：通过联合登录，用户不再需要长期有效的阿里云访问凭证。取而代之的是基于会话的、有时效性的临时安全令牌（STS Token）。这种模式消除了静态凭证泄露的风险，显著减少了攻击面，是云安全最佳实践的核心要求 。</p></li><li><p>简化的用户访问流程：用户只需登录一次 Authentik 门户，即可通过单击应用图标无缝跳转至阿里云管理控制台，无需再次输入密码 。这不仅提升了用户体验，也提高了开发和运维人员的工作效率。</p></li><li><p>统一的审计与合规：所有认证请求都将集中在 Authentik 进行记录和处理。这为安全审计提供了单一、全面的日志来源，有助于企业满足各类严格的合规性要求，如 SOX、PCI-DSS 等 。</p></li></ul><h3 id="登录流程">登录流程</h3><div class="note info flat"><p>虽然也是套话，但是建议了解一下</p></div><p>完整的 IdP 发起流程如下：</p><ol><li><p>用户发起登录（IdP-Initiated）：用户首先登录到其个人 Authentik 应用仪表板，然后点击代表阿里云控制台的应用程序图标 。</p></li><li><p>生成 SAML 断言：Authentik 接收到点击事件后，会生成一个经过数字签名的 SAML 断言（SAML Assertion）。这是一个 XML 格式的文档，其中包含了用户的身份信息（如用户名或邮箱）以及一系列特殊的属性，这些属性是阿里云用来确定用户应扮演何种角色的关键 。</p></li><li><p>浏览器重定向与 POST 请求：Authentik 将包含 SAML 断言的表单返回给用户的浏览器，并通过 JavaScript 自动提交此表单。浏览器向阿里云的断言消费服务（Assertion Consumer Service, ACS）端点发送一个 HTTP POST 请求，请求体中即为 SAML 断言 。</p></li><li><p>验证断言：阿里云的 SSO 服务接收到该 POST 请求后，首先会验证 SAML 断言的数字签名。它会使用预先配置好的、来自 Authentik 的 IdP 元数据中的公钥进行验签，以确保断言的完整性和来源可信性 。</p></li><li><p>解析属性：验签成功后，SSO 服务会解析 SAML 断言的内容，重点提取两个自定义的关键属性：Role 和 RoleSessionName 。</p></li><li><p>交换 STS 令牌：SSO 服务根据 Role 属性中指定的 RAM 角色 ARN 和 IdP ARN，调用阿里云的安全令牌服务（Security Token Service, STS），代表该用户请求扮演指定的 RAM 角色 。</p></li><li><p>创建控制台会话：STS 验证请求合法性后，会颁发一个包含临时访问凭证（AccessKey ID, SecretAccessKey, 和 SecurityToken）的 STS 令牌。阿里云 SSO 服务利用这个 STS 令牌生成一个预签名的、具有时效性的控制台登录 URL 。</p></li><li><p>重定向至控制台：最后，SSO 服务将此预签名 URL 返回给浏览器，浏览器自动跳转。用户最终无缝登录到阿里云管理控制台，并拥有了所扮演角色定义的全部权限。</p></li></ol><h3 id="创建签名证书">创建签名证书</h3><p>首先创建一个证书用于给SAML断言签名（当然你也可以用Authentik默认的证书，如果打算使用默认证书就可以跳过这节）</p><p>在侧边栏找到<code>System</code>-&gt;<code>Certificates</code>，点击<code>生成</code>按钮</p><p>常用名自己填就行，关键是<code>私钥算法</code>一定要选择<code>RSA</code>，千万不能选择<code>ECDSA</code>（大坑），因为阿里云不支持ECDSA签名验证，选择ECDSA会造成<code>NoPermission.NotTrusted</code></p><p>创建完成进入下一节</p><h3 id="创建Provider">创建Provider</h3><p>这里我们先创建Provider</p><p>在侧边栏找到<code>Application</code>-&gt;<code>Providers</code></p><p>点击<code>创建</code>按钮，选择<code>SAML Provider</code>类型</p><p><code>名称</code>：自填<br><code>授权流程</code>：默认的两个哪个都行，explicit的需要手动确认授权，implicit为静默授权<br><code>ACS URL</code>：为阿里云固定链接 <a href="https://signin.aliyun.com/saml-role/sso">https://signin.aliyun.com/saml-role/sso</a>（国际站可能不同）来源：<a href="https://help.aliyun.com/zh/ram/user-guide/configure-alibaba-cloud-as-a-trusted-sp-for-role-based-sso">进行角色SSO时企业IdP的SAML配置_访问控制(RAM)-阿里云帮助中心</a><br><code>颁发者（ EntityID）</code>：为阿里云固定内容：<code>urn:alibaba:cloudcomputing</code>，来源：<a href="https://help.aliyun.com/zh/ram/user-guide/configure-alibaba-cloud-as-a-trusted-sp-for-role-based-sso">进行角色SSO时企业IdP的SAML配置_访问控制(RAM)-阿里云帮助中心</a><br><code>服务提供程序绑定</code>：为固定选项<code>POST</code><br><code>Audience</code>：为阿里云固定内容：<code>urn:alibaba:cloudcomputing</code>，来源：<a href="https://help.aliyun.com/zh/ram/user-guide/saml-response-for-role-based-sso">角色SSO的SAML响应_访问控制(RAM)-阿里云帮助中心</a></p><p>然后展开下面的<code>高级协议设置</code>，签名证书选择上一节创建的RSA证书，勾选<code>签名断言</code></p><p>属性映射待会再设置</p><h3 id="创建阿里云身份提供商">创建阿里云身份提供商</h3><p>来到阿里云的访问控制RAM控制台<a href="https://ram.console.aliyun.com/">https://ram.console.aliyun.com/</a></p><p>在侧边栏找到<code>集成管理</code>-&gt;<code>SSO管理</code></p><p>选择<code>角色SSO</code>-&gt;<code>SAML</code>，选择<code>创建身份提供商</code></p><p><code>身份提供商名称</code>：自填，但是后面有参数会用到<br><code>元数据文档</code>：在authentik中刚刚创建的Provider的总览里，有个元数据下载按钮，下载该xml文档然后上传即可</p><p>创建完成后点击刚刚创建的身份提供商，找到<code>ARN</code>信息，复制备用，下文用<code>Idp ARN</code>代替该值</p><h3 id="创建阿里云角色">创建阿里云角色</h3><p>既然要扮演角色肯定要先创建角色</p><p>在侧边栏找到<code>身份管理</code>-&gt;<code>角色</code></p><p>点击<code>创建角色</code>，<code>信任主体类型</code>选择<code>身份提供商</code></p><p>提示<code>如果需要信任身份提供商，切换编辑器到自定义模式后配置。</code>，点击旁边的<code>切换编辑器</code></p><p>这里我们采用可视化编辑即可</p><p><code>效果</code>：选择允许<br><code>主体</code>：选择<code>身份提供商</code><br><code>操作</code>：勾选<code>sts:AssumeRole</code>（旁边的SetSourceIdentity不知道有什么用）<br><code>条件</code>：用于实现更复杂的限制策略，可以自己设置（我没设置）</p><p>点击确定添加即可</p><p>然后赋予角色权限</p><p>点击刚刚添加的角色，在权限管理内新增授权，具体要什么权限自己定，然后记录<code>ARN</code>，后面备用，下文用<code>角色 ARN</code>代替</p><blockquote><p>Tips：这里信任策略阿里云已经正常生成好了，不用自己填写或者修改了</p></blockquote><h3 id="创建Authentik的属性映射">创建Authentik的属性映射</h3><p>这里我们需要映射<code>Role</code>和<code>RoleSessionName</code>两个属性到SAML断言中</p><p><code>Role</code>：让阿里云知道是扮演哪个角色以及来自哪个身份提供商<br><code>RoleSessionName</code>：让阿里云知道是哪个用户（IAM的用户）进行了本次扮演（登录），用来作为登录用户信息的一部分显示在控制台上和操作审计日志</p><p>在Authentik侧边栏中找到<code>Customization</code>-&gt;<code>Property Mappings</code></p><p>选择<code>创建</code>，两个都是<code>SAML Provider Property Mapping</code>类型的</p><p>先创建Role</p><p><code>名称</code>：自填<br><code>SAML 属性名称</code>：为阿里云固定内容：<a href="https://www.aliyun.com/SAML-Role/Attributes/Role">https://www.aliyun.com/SAML-Role/Attributes/Role</a><br><code>表达式</code>：python写</p><p>表达式这里返回的内容会出现在断言中，而该部分内容组如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">角色ARN,IdpARN</span><br></pre></td></tr></table></figure><p>简单的表达式直接返回这个内容即可，当然你可以写更复杂的表达式，具体请参考Authentik官方文档中表达式一节</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="string">&quot;角色 ARN,Idp ARN&quot;</span></span><br></pre></td></tr></table></figure><p>然后创建RoleSessionName</p><p><code>名称</code>：自填<br><code>SAML 属性名称</code>：为阿里云固定内容：<a href="https://www.aliyun.com/SAML-Role/Attributes/RoleSessionName">https://www.aliyun.com/SAML-Role/Attributes/RoleSessionName</a><br><code>表达式</code>：python写</p><p>这里需要返回一个唯一标识用户的值，如员工ID、Email地址等，取值要求为：<code>长度不少于2个字符且不超过64个字符，只能是英文字母、数字和特殊字符-_.@=</code></p><p>我采用的是用户的Email</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> request.user.email</span><br></pre></td></tr></table></figure><p>这里变量由Authentik提供，其他变量请看Authentik官方文档</p><p>还有个可选的<code>SessionDuration</code>，表示会话有效期（我懒得弄没弄）</p><p><code>名称</code>：自填<br><code>SAML 属性名称</code>：为阿里云固定内容：<a href="https://www.aliyun.com/SAML-Role/Attributes/SessionDuration">https://www.aliyun.com/SAML-Role/Attributes/SessionDuration</a><br><code>表达式</code>：python写，同理直接return或者自己写复杂的表达式</p><p>取值要求为整数，单位为秒，最小值为900，最大值不能超过Role元素所代表的角色的最大会话时间。</p><p>有兴趣可以看看<a href="https://help.aliyun.com/zh/ram/user-guide/saml-response-for-role-based-sso">角色SSO的SAML响应_访问控制(RAM)-阿里云帮助中心</a></p><h3 id="进行属性映射">进行属性映射</h3><p>回到Authentik中，找到我们之前创建的Provider，点一下进入总览，编辑一下</p><p>在<code>高级协议设置</code>中，找到<code>属性映射</code>，把预置的没用属性全部移除，把刚刚创建的两个属性移到右边，保存</p><p>然后重新下载元数据，在阿里云SSO管理里更新一下元数据文档（存疑，建议还是更新一下）</p><h3 id="创建Application（应用）">创建Application（应用）</h3><p>在Authentik创建一个应用</p><p><code>名称</code>：自填<br><code>Slug</code>：自填<br><code>提供程序</code>：选择我们之前创建的Provider<br>剩下的看自己喜好</p><h3 id="权限设置">权限设置</h3><p>默认创建的应用是所有用户都能访问的，如果不做权限控制，那么所有用户都能进你的阿里云😂</p><p>这里我们点击创建的应用，选择<code>策略/组/用户绑定</code></p><p>然后点击<code>绑定已存在的 策略/组/用户</code>（这里推荐先创建一个组，然后把能够使用该应用的用户拉到这个组里，然后赋予这个组使用这个应用的权限，方便管理）</p><p>看自己选择是策略，组还是用户</p><p>策略的话要自己写策略，灵活性更高</p><p>Tips：默认注册流程中注册的用户是外部用户，无法进入Authentik仪表盘，可以去改一下注册流程</p><h3 id="测试">测试</h3><p>进入Authentik主界面，点击应用，跳转到阿里云，右上角看到角色登录，即成功登录。</p><h2 id="后记">后记</h2><p>折腾死我了，不过，Gemini 2.5Pro+Deep Research是真的好用😋</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;好久没写一篇正经的教程文章了，今天来写如何让authentik对接阿里云的角色SSO，实现单点登录指定角色&lt;/p&gt;
&lt;p&gt;本质上任何支持SAML的第三方IAM都能完成，只不过大同小异，本教程采用authentik进行示例。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.goodboyboy.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Web" scheme="https://blog.goodboyboy.top/categories/Web/"/>
    
    
    <category term="阿里云" scheme="https://blog.goodboyboy.top/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    <category term="SSO" scheme="https://blog.goodboyboy.top/tags/SSO/"/>
    
    <category term="authentik" scheme="https://blog.goodboyboy.top/tags/authentik/"/>
    
  </entry>
  
  <entry>
    <title>白嫖一年Gemini Pro</title>
    <link href="https://blog.goodboyboy.top/posts/2967291241.html"/>
    <id>https://blog.goodboyboy.top/posts/2967291241.html</id>
    <published>2025-06-30T13:03:05.000Z</published>
    <updated>2025-06-30T13:03:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>Google先前发起~~<em>大学生白嫖计划</em>~~ Google One AI Pro 教育学生优惠，面向巴西、印度尼西亚、日本、英国和美国大学生，时间截止于2025年6月30日</p><p>链接：<a href="https://gemini.google/students/">https://gemini.google/students/</a></p><h2 id="白嫖">白嫖</h2><p>但是~~~经过很多人测试，国内教育邮箱也能通过，而且不限制卡bin（国内万事达/VISA卡也行）</p><p>不过之前由于账号地区问题，一直卡在港区没转到日区，导致出现<code>此账号无法订阅 Google AI Pro</code></p><p>然而今天晚上刷小黑盒突然又看到这个贴子（冥冥之中有感应？），打算再试一下</p><p>诶？地区转过来了？？？</p><p>然后就是一套验证邮箱流程，成功白嫖😄</p><p><img src="https://pic.goodboyboy.top/imgs/2025/06/30/yydjha.webp" alt="订阅成功"></p><p><img src="https://pic.goodboyboy.top/imgs/2025/06/30/yyxcir.webp" alt="Gemini界面"></p><p>可以说是最后一天还剩三个小时的时候赶上车了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;Google先前发起~~&lt;em&gt;大学生白嫖计划&lt;/em&gt;~~ Google One AI Pro 教育学生优惠，面向巴西、印度尼西亚、日本、英国和美国大学生，时间截止于2025年6月30日&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&quot;htt</summary>
      
    
    
    
    <category term="说说" scheme="https://blog.goodboyboy.top/categories/%E8%AF%B4%E8%AF%B4/"/>
    
    
    <category term="Gemini" scheme="https://blog.goodboyboy.top/tags/Gemini/"/>
    
  </entry>
  
  <entry>
    <title>突然发现自己可能乳糖不耐受？</title>
    <link href="https://blog.goodboyboy.top/posts/3692423912.html"/>
    <id>https://blog.goodboyboy.top/posts/3692423912.html</id>
    <published>2025-06-30T09:10:49.000Z</published>
    <updated>2025-06-30T09:10:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正文">正文</h2><p>今天早上起来去考试，怕考试途中饿于是吃了点酱香饼和一杯豆浆垫垫肚子。</p><p>十一点考试完回到寝室，去寝室楼下买了一升纯牛奶，然后边打游戏边喝，没一会一升牛奶就被我喝完。</p><p>然后就悲剧了，肚子一直咕噜咕噜叫，去了趟厕所，刚蹲下就拉。。。还是纯水的那种，大便没多少，全是水😂</p><p>之前也出现过这种情况，以为是空腹喝牛奶的问题，毕竟之前空腹喝牛奶也是这样拉肚子，但是要是先吃了饭再喝就没问题</p><p>而且小时候喝牛奶也没出现这类情况</p><p>后面想了一下，可能是轻微乳糖不耐受（？）</p><p>吃了饭牛奶在胃里存留的时间比较长，消化的好一点，空腹的情况下可能一下就进肠道了</p><p>以前喝牛奶我一般一次都只喝200ml-500ml，上了大学后可支配资金多了，喜欢一次喝一升（逃）</p><p>哎，终究是没逃过乳糖不耐受，之前看网上说国内乳糖不耐受的人很多，看来自己也是其中之一了😂</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;
&lt;p&gt;今天早上起来去考试，怕考试途中饿于是吃了点酱香饼和一杯豆浆垫垫肚子。&lt;/p&gt;
&lt;p&gt;十一点考试完回到寝室，去寝室楼下买了一升纯牛奶，然后边打游戏边喝，没一会一升牛奶就被我喝完。&lt;/p&gt;
&lt;p&gt;然后就悲剧了，肚子一直咕噜咕噜叫，去了趟厕</summary>
      
    
    
    
    <category term="生活" scheme="https://blog.goodboyboy.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="日常" scheme="https://blog.goodboyboy.top/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="日常" scheme="https://blog.goodboyboy.top/tags/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="乳糖不耐受" scheme="https://blog.goodboyboy.top/tags/%E4%B9%B3%E7%B3%96%E4%B8%8D%E8%80%90%E5%8F%97/"/>
    
  </entry>
  
  <entry>
    <title>Android第三方Passkey管理器探索</title>
    <link href="https://blog.goodboyboy.top/posts/3009586281.html"/>
    <id>https://blog.goodboyboy.top/posts/3009586281.html</id>
    <published>2025-06-28T15:11:08.000Z</published>
    <updated>2025-06-28T15:11:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>相信经常在国际互联网冲浪的友友对Passkey一定不陌生，Google，GitHub等网站均支持Passkey一键登录，国内手机厂商也有推行Passkey的趋势（？）</p><p>众所周知，国内很多手机厂商在以前都是管生不管养。基本上手机发售一年以后就别想着升级了，现在各大手机厂商稍微好一些。</p><p>然而，虽然系统是更新了，但是部分功能只有在新机型上才做适配，而本文的主角Passkey就是其中之一。</p><p>博主手中的OPPO Find X5虽然已经更新到ColorOS 15，但是Passkey功能仍然无法使用，仅在OPPO Find X6及其以上的机型才支持。</p><p>虽然可以通过插入Canokey等物理安全硬件来实现Passkey登录，但是我日常外出一般是不带这些安全硬件的（怕丢）。</p><p>并且我之前也吐槽过，既然通过Google的GMS都可以让我手机使用Passkey，为啥OPPO不支持。。。</p><h2 id="探索过程">探索过程</h2><p>偶然间，看到一篇文章，说在Android 14中引入了Credential Manager API，该API可以用于集成密码管理工具，让密码管理工具来管理凭据，其中就提到了Passkey</p><p><a href="https://developer.android.com/identity/sign-in/credential-provider?hl=zh-cn">https://developer.android.com/identity/sign-in/credential-provider?hl=zh-cn</a></p><p>在此之前Android的默认Passkey实现是在Google的GMS中，并且也是对接的Google的凭据管理器</p><p>当时看到这篇文章时博主手机系统还是ColorOS 14，系统为Android 14，但是在网上下载了一个测试Demo软件，发现并不支持Credential Manager API，应该是厂商还没适配好</p><p>毕竟当时我也吐槽过，OPPO自家的Passkey实现与凭据管理器只在系统自带的浏览器上能调用，在Edge和Chrome中均调用的Google的Passkey实现与凭据管理器。</p><p>但是Google的Passkey实现会将Passkey上传到云端，并不是保存在手机本地，因此对其安全性表示怀疑（虽然声称是使用屏锁进行端到端加密）</p><p>没办法，可以说手机的Passkey功能基本用不了（包括一些Fido的2FA），如果实在要用Passkey，只能临时拿Canokey捅手机“屁股”或者用NFC（Canokey Canary已解决NFC感应问题），调用Google的Passkey实现来通过认证。</p><blockquote><p>Tips：这个实现可以调用不同的凭据来源（保存密码的实现），Google的Passkey实现可以通过USB和NFC读取我手中的Canokey硬件，而OPPO的Passkey实现NFC读不了，USB处于半残状态（现在已经是完全残废的情况了）</p></blockquote><p>这个方案一直在用，直到ColorOS 15最近的一次更新，我发现现在无论是OPPO自家的浏览器，还是Edge，Chrome甚至是Firefox，都会调用OPPO自家的Passkey实现</p><p>这就严重影响我的使用体验，因为OPPO自家的Passkey实现只会调用自家的凭据管理器（密码本），而且对于外置硬件也是半残状态（Google的至少我还能用Canokey硬件）</p><p>但令我没想到的是，我在手机设置里找到了一个新页面“登录信息自动填充服务”，这个页面有个“密码管理服务”，包含“密码本”（OPPO 用于保存密码的软件，包含存储Passkey），“Authenticator”（微软的），“Google”</p><p>然后默认是打开了密码本的，Google的没有打开。</p><p>我想，这会不会就是问题所在，于是我把密码本的关了，把Google的打开，发现Edge可以用Google的Passkey实现了</p><p>看到剩下微软的那个authenticator，突然想到会不会更新后现在已经支持使用第三方凭据管理器了？</p><blockquote><p>Tips：微软的authenticator已经宣布即将停止对密码管理功能的支持</p></blockquote><p>于是下了个Bitwarden，发现确实新增了该选项</p><p>众所又周知，Bitwarden是可以自托管的，而且还有vaultwarden这种第三方项目来降低托管压力，所以临时先在本地服务器上建了个，尝试了一下，发现可以完美使用Passkey的</p><h2 id="现状">现状</h2><p>原先情况：</p><p>Edge，Chrome-&gt;Android Passkey接口-&gt; Google Passkey实现（默认）-&gt;Google密码管理器/外置硬件</p><p>OPPO浏览器-&gt;OPPO Passkey实现（第三方）-&gt;密码本（不支持）/外置硬件（残废）</p><p>现在：</p><p>Edge，Chrome-&gt; Android Passkey接口-&gt;OPPO Passkey实现（默认）-&gt;Credential Manager API（在设置中选择）-&gt;密码本/Google/Bitwarden/外置硬件（残废）</p><blockquote><p>Tips：OPPO浏览器仍然不支持Credential Manager。另外如果仅开启Google，则会调用到Google Passkey的实现</p></blockquote><p>并且由于调用的是OPPO的Passkey接口，现在还支持跨设备使用（手机扫描电脑上的Fido二维码在电脑上进行登录或注册）</p><p>因为该功能需要使用服务器，所以原先Google的Passkey就用不了（可能因为安全设计原因，挂了代理也会在最后一步失败）</p><h2 id="后记">后记</h2><p>主要是Bitwarden在断网情况下无法新增，读取Passkey好像也有点问题？感觉这点比keepass就差点</p><p>不过这也主要看客户端实现咯，像PC上的KeepassXC就不支持在无网情况下使用已连接过的远程的密码库，而在Android上的客户端Keepass2Android就支持无网使用已连接过的远程密码库</p><p>虽然现在Keepass本身已经支持保存Passkey，但是Keepass2Android目前还不支持使用Credential Manager API来保存（悲）</p><p>目前打算先用着Bitwarden，希望Keepass2Android作者能尽快更新这个功能吧</p><p>另外由于选择Bitwarden则会调用OPPO Passkey的实现，所以我的Canokey完全用不了，只能在要使用的时候再切换成Google的了（悲）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;相信经常在国际互联网冲浪的友友对Passkey一定不陌生，Google，GitHub等网站均支持Passkey一键登录，国内手机厂商也有推行Passkey的趋势（？）&lt;/p&gt;
&lt;p&gt;众所周知，国内很多手机厂商在以前都是管生不管养。基本</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.goodboyboy.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Software" scheme="https://blog.goodboyboy.top/categories/Software/"/>
    
    
    <category term="Passkey" scheme="https://blog.goodboyboy.top/tags/Passkey/"/>
    
    <category term="Android" scheme="https://blog.goodboyboy.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>多线程我太爱你了，你个“大可爱”</title>
    <link href="https://blog.goodboyboy.top/posts/1349596188.html"/>
    <id>https://blog.goodboyboy.top/posts/1349596188.html</id>
    <published>2025-06-26T04:44:54.000Z</published>
    <updated>2025-06-26T04:44:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>又是大早上被多线程折磨的一天</p></blockquote><p>先简单讲一下功能框架吧</p><pre><code class="highlight mermaid">flowchart TD    A(用户发起查询操作) --&gt; B&#123;查询cache&#125;    B -- 有 --&gt; C[返回cache内容给用户]    B -- 没有 --&gt; D[请求remote]    D --&gt; E[remote返回内容]    E --&gt; F[内容返回给用户]    E --&gt; G[remote内容写入cache]</code></pre><p>简单来说就是从两个数据源获取信息，先查cache，cache没有再查remote，remote得到数据后返回给用户并写入cache</p><p>然后就出问题了，具体问题表现为出现重复插入情况</p><p>经过排查，发现remote请求返回的数据正常，但是到写入Room数据库的时候出现插入数量正确，但是部分item重复插入，部分item丢失的情况</p><p>问了一下ChatGPT，在给出的几个可能性中锁定到多线程并发写入导致的竞态和异常。</p><p>不过虽然该保存数据的函数确实是suspend的异步函数，但是我在函数入口明明打了断点，断点只触发一次，不存在多线程的问题</p><p>把代码贴上来问了问ChatGPT，结果给我整绷不住了：</p><p><img src="https://pic.goodboyboy.top/imgs/2025/06/26/ktlzkw.webp" alt="问题"></p><p>不是，也没人给我说呀，怎么kotlin的foreach和for还有这大坑等着我的。。。</p><p>然而把foreach改成for后还是一样的问题，继续追问</p><p>在众多的可能性中，锁定协程作用域问题</p><p>指出<code>确保你的suspend fun saveServiceList()不是在多个协程并发调用！否则即使方法内部串行，外部还是会并发插入，导致竞态。</code></p><p>但是之前说过，我打的断点明明只触发一次，怎么会出现外部多次调用呢？</p><p>没办法，按照ChatGPT说的老老实实打Log看输出，在dao的insert方法前后插Log，发现确实是出现竟态问题。</p><p>然后ChatGPT再次指出确保整个suspend方法不在多个协程并发调用，提出用Mutex锁包裹整个suspend方法</p><p>结果发现居然没问题了？？？</p><p>所以还真是被多个协程调用了？？？我怎么不知道？？？</p><p>虽然用锁临时解决了该问题，但这个操作本质是不应该被多个协程调用的，说明代码本身有问题</p><p>本着不想写屎山的心态，继续问</p><p>然后ChatGPT指出：</p><p><img src="https://pic.goodboyboy.top/imgs/2025/06/26/lnnu2i.webp" alt="原因"></p><p><img src="https://pic.goodboyboy.top/imgs/2025/06/26/lnzvr8.webp" alt="原因"></p><p>所以断点在并发协程中并不适用来判断调用次数</p><p>我：多线程你太可爱了</p><p>给suspend方法第一行插个Log，发现确实日志打印了两遍</p><p>然后就是顺藤摸瓜，给所有调用点全部插Log，最后发现在ViewModel中的起始loadService函数被调用了两次</p><p>定位到View中发现在UI里有两处调用，一看代码就发现问题了。</p><p>一个来自ViewModel中的loadServiceState在View中监听，当State由Idle变为Loading后触发loadService，加载数据</p><p>然后一个手动刷新按钮，首先清除数据，然后更改loadServiceState的State为Loading，最后手动调用loadService</p><p>因此当手动刷新时，就会出现loadServiceState改变而触发的loadService以及按钮自身调用的loadService。。。</p><p>代码一多自己都忘记原来写的逻辑了，又是被多线程折腾的一天</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;又是大早上被多线程折磨的一天&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先简单讲一下功能框架吧&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;highlight mermaid&quot;&gt;flowchart TD
    A(用户发起查询操作) --&amp;gt;</summary>
      
    
    
    
    <category term="说说" scheme="https://blog.goodboyboy.top/categories/%E8%AF%B4%E8%AF%B4/"/>
    
    
    <category term="说说" scheme="https://blog.goodboyboy.top/tags/%E8%AF%B4%E8%AF%B4/"/>
    
    <category term="Jetpack Compose" scheme="https://blog.goodboyboy.top/tags/Jetpack-Compose/"/>
    
    <category term="Android" scheme="https://blog.goodboyboy.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>[公告]现评论区已支持使用emoji表情符号😊</title>
    <link href="https://blog.goodboyboy.top/posts/3957499697.html"/>
    <id>https://blog.goodboyboy.top/posts/3957499697.html</id>
    <published>2025-06-23T05:00:29.000Z</published>
    <updated>2025-06-23T05:00:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正文">正文</h2><blockquote><p>现博客评论区已支持使用emoji表情符号😊</p></blockquote><p>因历史原因，服务器数据库字符集采用utf8mb3编码，最大支持3字节字符，导致不支持4字节的emoji，以及大部分Unicode字符集。</p><p>为跟上时代发展（？），启动数据库更新计划。</p><p>目前已将数据库字符集由原来的utf8mb3调整为utf8mb4，排序规则由utf8mb3_general_ci调整为utf8mb4_unicode_ci。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;现博客评论区已支持使用emoji表情符号😊&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因历史原因，服务器数据库字符集采用utf8mb3编码，最大支持3字节字符，导致不支持4字节的emoji，以及大部分Uni</summary>
      
    
    
    
    <category term="公告" scheme="https://blog.goodboyboy.top/categories/%E5%85%AC%E5%91%8A/"/>
    
    
    <category term="公告" scheme="https://blog.goodboyboy.top/tags/%E5%85%AC%E5%91%8A/"/>
    
    <category term="emoji" scheme="https://blog.goodboyboy.top/tags/emoji/"/>
    
  </entry>
  
  <entry>
    <title>Debian GRUB踩坑记——out of memory</title>
    <link href="https://blog.goodboyboy.top/posts/2924052970.html"/>
    <id>https://blog.goodboyboy.top/posts/2924052970.html</id>
    <published>2025-06-18T16:08:12.000Z</published>
    <updated>2025-06-18T16:08:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因">起因</h2><p>偶然在网上刷到一个很好看的grub引导界面，才发现原来grub也能设置主题，而且这种设置只是更改grub配置文件，不操作引导程序的二进制文件，因而不会影响Secure Boot</p><p>于是找了一个超好看的主题给grub安排上</p><p>结果就是：</p><p>Error: out of memory<br>Press any key to continue…</p><p>然后进不去系统了。。。</p><h2 id="折腾">折腾</h2><blockquote><p>解决方案可以直接去下一节</p></blockquote><p>首先出的问题是选择Debian引导后加载initramfs时提示内存耗尽</p><p>然后按下任意键提示：<code>Kernel Panic - not syncing: VFS: Unable to mount root fs on unknown-block(0,0)</code></p><p>因为我启用了luks全盘加密，所以这种情况第一反应是引导找不到加密分区了</p><p>问了一下ChatGPT，给出的方案是GRUB配置错误或者initramfs损坏</p><p>但是在此之前我都能正常启动系统，而且我也只是对GRUB进行了更改，没有动initramfs,所以排除initramfs损坏</p><p>然后我给ChatGPT拍了一下GRUB中Debian引导的引导脚本，ChatGPT说是initramfs中没有包含LVM支持，但同样的，我根本没动initramfs,而且之前也能正常开机</p><p>给ChatGPT说了一下，并附上了引导脚本，然后给出了修改引导脚本的方法，这里就开始鬼畜起来了</p><p>让我给内核文件路径和initramfs文件路径加上<code>/boot</code>前缀，说如果/boot是独立分区，不加前缀是找不到内核和initramfs的（开始胡言乱语起来了）</p><p>按照它说的，加了前缀之后引导直接找不到内核文件了。。。</p><p>给ChatGPT反映了一下该情况，ChatGPT马上改口，说不要加<code>/boot</code>前缀。。。</p><p>自己又怀疑了一下是不是存储介质的问题，毕竟是U盘，插到电脑上当作系统盘温度超高（把我的USB Hub连带着一起烫），没测过温度，反正手放在上面超过半秒就烫得受不了</p><p>引导到windows下用dg扫了一下，除了几十个严重，其他大多数都是良好，这种结果的话那就没什么参考价值了</p><p>没办法，只能拿另一个U盘装个Live CD来抢救</p><p>然后就是不知道自己是那根筋没对，把Live CD刻在DVD上折磨自己😅</p><p>好不容易把iso刻录完成，启动系统启动了十多分钟。。。</p><p>启动完成后解锁分区，挂载分区，update了一下grub（以为是grub损坏了）</p><p>reboot，很好，问题依旧</p><p>不想再浪费时间启动DVD了，重新拿个U盘把Live CD刻了上去。。。</p><p>继续深问，然后说最稳妥的启动配置是不加前缀的那个，那不就和原来一样的了，变成最开始的问题😂</p><p>然后ChatGPT继续复盘，又说是initrd.img缺少luks和lvm模块。。。</p><p>我都说了快八百遍了没动initramfs</p><p>算了，选择怀疑一下自己，进Live CD挂载好原来的分区，执行<code>update-initramfs -u</code>重新生成一下</p><p>不出所料，还是一样的问题。。。</p><p>最后想着，看看把grub配置恢复成没安装主题的时候会怎么办（丝毫没怀疑是主题的问题）</p><p>注释掉主题配置行，执行<code>update-grub</code></p><p>诶👆🙄，引导成功，进入系统</p><p>虽然成功进入系统，但是还是没搞懂原因，于是把解决方案给ChatGPT说了一下，又开始了胡言乱语。。。</p><p>说是主题会替换grub.cfg模板，阻断加密检测的执行云云</p><p>但我实际对比了一下启用主题和没启用主题下生成的grub.cfg的区别，就单纯多了一个加载主题资源的代码而已</p><p>而且整个主题都是我手动cp装的，根本没执行主题自带的安装脚本</p><p>后面继续胡言乱语，说要加入<code>DRUB_ENABLE_CRYPTODISK=y</code>来解锁Boot分区，但是我tm根本没加密boot分区啊啊啊。。。</p><p>启用luks全盘加密下根本不能加密boot分区，不然谁给你解密分区。。。</p><p>然后我给它“善意”的提醒了一下，马上又改口不用加。。。</p><p>还是得靠自己，控制变量法下找了另一个评级最高的主题试了一下，发现居然可以成功引导</p><p>间接证明ChatGPT前面一大堆都是废话。。。</p><p>突然灵光一现想着会不会有什么内存限制？</p><p>出问题的那个主题有13MB大小，没问题的那个主题只有0.7MB大小，并且最开始也是<code>out of memory</code>，或许根本不是什么找不到加密分区，一开始方向就错了！！！</p><p>问了一下ChatGPT，发现确实是有内存限制，不过不同设备限制不同</p><p>以防万一，去AI Studio顺便问了问Gemini,也是肯定有相关限制，但是具体限制多少以及怎么解除限制说不出来</p><p>Gemini留的链接:</p><p><a href="https://www.ibm.com/support/pages/system-boot-ends-grub-out-memory-oom">https://www.ibm.com/support/pages/system-boot-ends-grub-out-memory-oom</a></p><p><a href="https://forum.endeavouros.com/t/grub-out-of-memory/30967/38">https://forum.endeavouros.com/t/grub-out-of-memory/30967/38</a></p><p><a href="https://www.kubuntuforums.net/forum/currently-supported-releases/kubuntu-22-04-jammy-jellyfish/post-installation-ax/666407-fatal-out-of-memory-error-on-boot-grub-efi-problem">https://www.kubuntuforums.net/forum/currently-supported-releases/kubuntu-22-04-jammy-jellyfish/post-installation-ax/666407-fatal-out-of-memory-error-on-boot-grub-efi-problem</a></p><p>梳理了一下，得到了最终的结果</p><h2 id="结果">结果</h2><p>由于使用了较大的主题，导致GRUB out of memory，然后由于out of memory，导致luks模块和lvm模块没加载进内存，因此无法解密加密分区，出现<code>Kernel Panic - not syncing: VFS: Unable to mount root fs on unknown-block(0,0)</code></p><p>当主题换成较小的主题时未触发out of memory，正常加载模块，解密加密分区，进入系统。</p><p>回想起来，设置那个有问题的主题的时候，第一次分辨率配置格式没配置正确，导致引导界面分辨率超低，但也使得没有out of memory，成功引导进入系统，第二次正确配置成2560x1440的2k分辨率后就出现out of memory了（高分辨率特别占memory）。</p><p>具体memory大小我也不知道怎么查，可能是128MB？256MB？还是512MB？</p><p>不过这个memory会加载系统内核，initrd，还有各种模块，我看网上有些人的initrd文件大小高达100MB+，正常引导不设置主题都会出现out of memory😂</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;起因&quot;&gt;起因&lt;/h2&gt;
&lt;p&gt;偶然在网上刷到一个很好看的grub引导界面，才发现原来grub也能设置主题，而且这种设置只是更改grub配置文件，不操作引导程序的二进制文件，因而不会影响Secure Boot&lt;/p&gt;
&lt;p&gt;于是找了一个超好看的主题给grub安排上&lt;</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.goodboyboy.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Software" scheme="https://blog.goodboyboy.top/categories/Software/"/>
    
    
    <category term="Debian" scheme="https://blog.goodboyboy.top/tags/Debian/"/>
    
    <category term="GRUB" scheme="https://blog.goodboyboy.top/tags/GRUB/"/>
    
  </entry>
  
  <entry>
    <title>为Debian KDE更换显示字体为思源黑体</title>
    <link href="https://blog.goodboyboy.top/posts/2641633329.html"/>
    <id>https://blog.goodboyboy.top/posts/2641633329.html</id>
    <published>2025-06-13T14:39:52.000Z</published>
    <updated>2025-06-13T14:39:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>因为感觉默认的note sans字体有点瘦和细，显示屏上看着有点难受，打算换个养眼一点的字体，感觉思源黑体不错，免费商用，不用担心版权问题，而且字体也好看。</p><h2 id="下载">下载</h2><p>思源字体repo：<a href="https://github.com/adobe-fonts/source-han-sans">https://github.com/adobe-fonts/source-han-sans</a></p><p>在下载向导页面可以看到多种字体类型：<a href="https://github.com/adobe-fonts/source-han-sans/tree/release">https://github.com/adobe-fonts/source-han-sans/tree/release</a></p><p>因为是用于系统显示，因此这里推荐使用包括了五种语言的字体，不推荐使用语言特定（Language-specific）和区域特定（Region-specific）的字体，避免出现字体不一致的情况。</p><p>至于是下载非VF字体还是VF字体可以自己根据实际情况决定</p><div class="note info flat"><p>可变字体（Variable Font，VF）相较于传统字体支持<code>无限可调字重（100-900，任意粗细）</code>，但目前系统设置里貌似不能调整，只能选择预设的字重</p></div><p>为了方便在设计时使用可变字体（不想装一个非VF一个VF），干脆直接装了VF版</p><p>旧版Debian建议选TTF，较新的Debian可以选OTF</p><p>带有HW为使用半宽字形表示 ASCII，可以理解为等宽字体（用于写代码等格式要求严格的使用场景）</p><p>Variable OTF：<a href="https://github.com/adobe-fonts/source-han-sans/raw/release/Variable/OTC/SourceHanSans-VF.otf.ttc">https://github.com/adobe-fonts/source-han-sans/raw/release/Variable/OTC/SourceHanSans-VF.otf.ttc</a><br>Variable HW OTF：<a href="https://github.com/adobe-fonts/source-han-sans/raw/release/Variable/OTC/SourceHanSansHW-VF.otf.ttc">https://github.com/adobe-fonts/source-han-sans/raw/release/Variable/OTC/SourceHanSansHW-VF.otf.ttc</a></p><p>Variable TTF：<a href="https://github.com/adobe-fonts/source-han-sans/raw/release/Variable/OTC/SourceHanSans-VF.ttf.ttc">https://github.com/adobe-fonts/source-han-sans/raw/release/Variable/OTC/SourceHanSans-VF.ttf.ttc</a><br>Variable HW TTF：<a href="https://github.com/adobe-fonts/source-han-sans/raw/release/Variable/OTC/SourceHanSansHW-VF.ttf.ttc">https://github.com/adobe-fonts/source-han-sans/raw/release/Variable/OTC/SourceHanSansHW-VF.ttf.ttc</a></p><p>如果是装非VF字体，可以选择super OTC,包含了五种语言和七种字重</p><p>Super OTC：<a href="https://github.com/adobe-fonts/source-han-sans/releases/download/2.004R/SourceHanSans.ttc.zip">https://github.com/adobe-fonts/source-han-sans/releases/download/2.004R/SourceHanSans.ttc.zip</a></p><p>同样的，这只能在较新的系统上使用，较旧的系统只能一个一个装。</p><p>Static OTCs：<a href="https://github.com/adobe-fonts/source-han-sans/releases/download/2.004R/SourceHanSansOTC.zip">https://github.com/adobe-fonts/source-han-sans/releases/download/2.004R/SourceHanSansOTC.zip</a></p><h2 id="安装">安装</h2><p>字体下载完成后右键安装字体即可</p><div class="note info flat"><p>目前在5.27.5的KDE中，KFontView仍然无法在Wayland下正常使用，请直接右键安装字体。</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;因为感觉默认的note sans字体有点瘦和细，显示屏上看着有点难受，打算换个养眼一点的字体，感觉思源黑体不错，免费商用，不用担心版权问题，而且字体也好看。&lt;/p&gt;
&lt;h2 id=&quot;下载&quot;&gt;下载&lt;/h2&gt;
&lt;p&gt;思源字体repo：&lt;a</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.goodboyboy.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Software" scheme="https://blog.goodboyboy.top/categories/Software/"/>
    
    
    <category term="Debian" scheme="https://blog.goodboyboy.top/tags/Debian/"/>
    
    <category term="字体" scheme="https://blog.goodboyboy.top/tags/%E5%AD%97%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>Debian补全办公常用字体</title>
    <link href="https://blog.goodboyboy.top/posts/1487564320.html"/>
    <id>https://blog.goodboyboy.top/posts/1487564320.html</id>
    <published>2025-06-11T09:08:18.000Z</published>
    <updated>2025-06-11T09:08:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>linux上WPS教育版用起来还不错，比libreOFFICE好用，但是缺少部分常用字体（楷体，黑体等）</p><div class="note warning flat"><p>因为版权问题，Debian并没有内置这些字体，需要自行安装，建议仅个人使用，商业使用请先获得版权方授权。</p></div><p>因为我一般只用于课设、团学内部文档、比赛等等，没有商业用途，所以就直接装了</p><h2 id="安装">安装</h2><p>从网上或者windows下（<code>C:\Windows\Fonts\</code>）复制</p><p>windows对应的字体表：<a href="https://learn.microsoft.com/en-us/typography/fonts/windows_10_font_list">https://learn.microsoft.com/en-us/typography/fonts/windows_10_font_list</a></p><p>一般常用的有：</p><ul><li>楷体（simkai.ttf）</li><li>黑体（simhei.ttf）</li><li>仿宋（simfang.ttf）</li><li>仿宋_G2312</li><li>宋体（WPS还是Linux已自带）</li><li>方正小标宋简</li><li>微软雅黑（msyh.ttc）</li></ul><p><code>方正小标宋简</code>以及<code>仿宋_G2312</code>可以从<a href="https://life.scnu.edu.cn/a/20220309/5508.html">https://life.scnu.edu.cn/a/20220309/5508.html</a>下载</p><p>字体下载完后，和windows安装字体一样，把字体文件移动到<code>/usr/local/share/fonts/windows</code>目录下即可</p><div class="note info flat"><p>不推荐移动到<code>/usr/share/fonts</code>目录下，该目录受系统包管理器维护，在系统更新时可能被覆盖</p></div><p>这里为了方便管理，可以创建一个文件夹来集中这些有版权风险的字体（雾</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> /usr/local/share/fonts/windows</span><br></pre></td></tr></table></figure><p>然后将这些字体全部移动到这个文件夹下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> 字体文件路径 /usr/local/share/fonts/windows</span><br></pre></td></tr></table></figure><p>然后就可以在wps上看到字体了。</p><p>除了中文的字体，还有<code>Arial</code>，<code>Times New Roman</code>等英文字体，这里采用软件包的方式安装</p><p>首先启用<code>contrib</code>和<code>non-free</code>软件源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-add-repository contrib non-free</span><br></pre></td></tr></table></figure><p>然后安装字体</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install ttf-mscorefonts-installer</span><br></pre></td></tr></table></figure><p>安装完后即可在WPS上看到相关字体</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;linux上WPS教育版用起来还不错，比libreOFFICE好用，但是缺少部分常用字体（楷体，黑体等）&lt;/p&gt;
&lt;div class=&quot;note warning flat&quot;&gt;&lt;p&gt;因为版权问题，Debian并没有内置这些字体，需要自</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.goodboyboy.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Software" scheme="https://blog.goodboyboy.top/categories/Software/"/>
    
    
    <category term="Debian" scheme="https://blog.goodboyboy.top/tags/Debian/"/>
    
    <category term="字体" scheme="https://blog.goodboyboy.top/tags/%E5%AD%97%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>Debian12 KDE Edge输入法问题</title>
    <link href="https://blog.goodboyboy.top/posts/1016592383.html"/>
    <id>https://blog.goodboyboy.top/posts/1016592383.html</id>
    <published>2025-06-11T06:36:09.000Z</published>
    <updated>2025-06-11T06:36:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>因为部分网页可能Chromium内核渲染更好，而且也打算把两个主流内核都补齐，Chrome因为墙的原因数据同步比较麻烦，于是打算用Edge。</p><h2 id="输入法问题">输入法问题</h2><p>已知在最新版Edge（microsoft-edge-stable_137.0.3296.68-1_amd64）上出现输入法问题</p><p>具体表现为fcitx5在英文状态下无法输入任何内容，而在非英文状态下则正常输入。</p><p>ubuntu ask上也有人提了相关问题：<a href="https://askubuntu.com/questions/1550458/cannot-type-in-ms-edge-and-chrome-with-fcitx5-english-under-x11-fcitx5-chinese">https://askubuntu.com/questions/1550458/cannot-type-in-ms-edge-and-chrome-with-fcitx5-english-under-x11-fcitx5-chinese</a></p><p>该问题说包含Chrome浏览器，但是经过我测试Chrome浏览器没有出现该情况，我使用的是Wayland，可能是在x11上chrome也表现不佳？</p><p>目前在Debian的官方应用商店上也有相关评论：</p><p><img src="https://pic.goodboyboy.top/imgs/2025/06/11/nwyblu.webp" alt="问题"></p><p>该问题应该不是个例</p><h2 id="解决方案">解决方案</h2><p>降级Edge浏览器，经过测试，<code>136.0.3240.92-1</code>版本没有该问题，其他版本未知</p><p>历史版本下载地址：<a href="https://packages.microsoft.com/repos/edge/pool/main/m/microsoft-edge-stable/">https://packages.microsoft.com/repos/edge/pool/main/m/microsoft-edge-stable/</a></p><h2 id="后记">后记</h2><p>虽然该问题对中文用户影响较小，但我平时输入英文还是更喜欢切换到英文输入法，用中文输入法输入中文感觉好别扭。</p><p>Debian安装deb包需要sudo,因此一般不会像windows上那样偷偷自动更新（微软怕不是对自动更新有什么执念）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;因为部分网页可能Chromium内核渲染更好，而且也打算把两个主流内核都补齐，Chrome因为墙的原因数据同步比较麻烦，于是打算用Edge。&lt;/p&gt;
&lt;h2 id=&quot;输入法问题&quot;&gt;输入法问题&lt;/h2&gt;
&lt;p&gt;已知在最新版Edge（mi</summary>
      
    
    
    
    <category term="说说" scheme="https://blog.goodboyboy.top/categories/%E8%AF%B4%E8%AF%B4/"/>
    
    
    <category term="Edge" scheme="https://blog.goodboyboy.top/tags/Edge/"/>
    
  </entry>
  
  <entry>
    <title>Debian KDE Plasma 5调整外接显示器亮度</title>
    <link href="https://blog.goodboyboy.top/posts/950775551.html"/>
    <id>https://blog.goodboyboy.top/posts/950775551.html</id>
    <published>2025-06-10T17:21:56.000Z</published>
    <updated>2025-06-10T17:21:56.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><p>KDE Plasma 6.2已支持调整DDC/CI协议的显示器</p></div><p>但是Debian12用的是Plasma 5.27.5，还不支持这个功能（悲</p><p>找到了一个好用的小插件，特地来分享记录一下</p><p>该插件可以像作为小组件集成到Plasma中，就像windows下的Twinkle Tray一样。</p><p>项目地址：<a href="https://github.com/davidhi7/ddcci-plasmoid">https://github.com/davidhi7/ddcci-plasmoid</a></p><h2 id="安装ddcutil">安装ddcutil</h2><p>ddcutil为实际控制显示器的工具，用于和显示器通信</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install ddcutil</span><br></pre></td></tr></table></figure><p>安装完成后检测显示器，看是否能正常识别到显示器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ddcutil detect</span><br></pre></td></tr></table></figure><p>正常情况下应该能读取到类似下面的信息（这是我的显示器信息）</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Display 1</span><br><span class="line">   I2C bus:  /dev/i2c-32</span><br><span class="line">   DRM connector:           card0-DP-1</span><br><span class="line">   EDID synopsis:</span><br><span class="line">      Mfg id:               AOC - UNK</span><br><span class="line">      Model:                Q27G2S</span><br><span class="line">      Product code:         9986  (0x2702)</span><br><span class="line">      Serial number:        xxxxxxxxxxxxx</span><br><span class="line">      Binary serial number: xxxx (0xxxxxxxxx)</span><br><span class="line">      Manufacture year:     2024,  Week: 8</span><br><span class="line">   VCP version:         2.2</span><br></pre></td></tr></table></figure><p>如果返回的是下面的信息，说明没有加载内核模块（Debian一般都会出现这种情况）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">No /dev/i2c devices exist.</span><br><span class="line">ddcutil requires module i2c-dev.</span><br></pre></td></tr></table></figure><p>这里加载一下内核模块就行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> modprobe i2c-dev</span><br></pre></td></tr></table></figure><p>验证是否加载成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> /dev/i2c-*</span><br></pre></td></tr></table></figure><p>正常加载会显示<code>/dev/i2c-0</code>等设备文件</p><p>如果正确加载我们将配置写入模块列表确保开机自动加载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;i2c-dev&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/modules-load.d/i2c-dev.conf</span><br></pre></td></tr></table></figure><p>然后更新initramfs</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> update-initramfs -u</span><br></pre></td></tr></table></figure><h2 id="调整亮度">调整亮度</h2><p>先尝试查询亮度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ddcutil getvcp 10</span><br></pre></td></tr></table></figure><p>设置亮度为50%（按自己喜欢来，只是做测试）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ddcutil getvcp 10 50</span><br></pre></td></tr></table></figure><p>如果发现显示器可以正常响应亮度修改则进入下一步</p><h2 id="安装backend">安装backend</h2><p>这个是小组件的后端，一个python包，可以通过pip或者pipx安装</p><p>pip：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --user ddcci-plasmoid-backend</span><br></pre></td></tr></table></figure><p>pipx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipx install ddcci-plasmoid-backend</span><br></pre></td></tr></table></figure><h2 id="安装小组件">安装小组件</h2><p>下载小组建<a href="https://store.kde.org/p/2015475">https://store.kde.org/p/2015475</a></p><p>下载后解压，然后安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kpackagetool5 --install plasmoid</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>如果您在上一步中使用了<code>pipx</code>来安装backend，则小部件设置<code>Backend executable command</code>必须设置为<code>~/.local/bin/ddcci_plasmoid_backend</code>（前面不带 python3 或其他任何内容）。</p></div><h2 id="显示小组件">显示小组件</h2><p>系统托盘的箭头-&gt;配置系统托盘-&gt;项目-&gt;找到<code>显示器亮度</code> 并根据您的偏好设置可见性</p><p>如果使用pipx安装的backend，则点击小组件后点击右上角的设置按钮，按照前面的提示<code>后端命令行</code>的内容，最后应用即可。</p><p>Enjoy！😘</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;KDE Plasma 6.2已支持调整DDC/CI协议的显示器&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;但是Debian12用的是Plasma 5.27.5，还不支持这个功能（悲&lt;/p&gt;
&lt;p&gt;找到了一个好用的小插件，特地来分享记</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.goodboyboy.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Software" scheme="https://blog.goodboyboy.top/categories/Software/"/>
    
    
    <category term="Debian" scheme="https://blog.goodboyboy.top/tags/Debian/"/>
    
    <category term="KDE" scheme="https://blog.goodboyboy.top/tags/KDE/"/>
    
  </entry>
  
  <entry>
    <title>Debian开玩Minecraft</title>
    <link href="https://blog.goodboyboy.top/posts/3464924544.html"/>
    <id>https://blog.goodboyboy.top/posts/3464924544.html</id>
    <published>2025-06-10T05:05:06.000Z</published>
    <updated>2025-06-10T05:05:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>虽然装Debian确实是为了外出方便省电，但还是需要劳逸结合的（逃</p><h2 id="官方启动器">官方启动器</h2><p>在官方下载页面<a href="https://www.minecraft.net/zh-hans/download">https://www.minecraft.net/zh-hans/download</a>找到<code>Debian 版及基于 Debian 的版本</code>，下载deb包然后安装即可。</p><p>界面区别和windows版不大</p><p><img src="https://pic.goodboyboy.top/imgs/2025/06/10/lv9mrt.webp" alt="官方启动器"></p><h2 id="LabyMod">LabyMod</h2><p>第三方PvP客户端LabyMod也支持Debian，在下载页面<a href="https://www.labymod.net/en/download">https://www.labymod.net/en/download</a>选择<code>other</code>，找到Debian下载deb包安装即可。</p><p>界面和windows版区别也不大</p><p><img src="https://pic.goodboyboy.top/imgs/2025/06/10/lv9zov.webp" alt="LabyMod启动器"></p><h2 id="HMCL">HMCL</h2><p>第三方MC客户端由java编写，同时也适配了Linux系统，在下载页面<a href="https://hmcl.huangyuhui.net/download/">https://hmcl.huangyuhui.net/download/</a>下载<code>.jar</code>文件</p><p>需要注意的是，稳定版貌似提供的是一个sh脚本文件，但是我运行出了问题，下面开发版则是可以直接下载到.jar</p><p>另外系统需要先安装java环境才能启动HMCL，不过如果先安装了官方启动器，官方启动器会将环境配置好，因此直接使用命令就能启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar HMCL jar文件的位置</span><br></pre></td></tr></table></figure><p>界面和windows版没有区别。</p><p><img src="https://pic.goodboyboy.top/imgs/2025/06/10/lvaab0.webp" alt="HMCL"></p><h2 id="后继">后继</h2><p>虽然没装独显驱动，但是不打光影用核显跑还是没问题的，180fps跑满</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;虽然装Debian确实是为了外出方便省电，但还是需要劳逸结合的（逃&lt;/p&gt;
&lt;h2 id=&quot;官方启动器&quot;&gt;官方启动器&lt;/h2&gt;
&lt;p&gt;在官方下载页面&lt;a href=&quot;https://www.minecraft.net/zh-hans/</summary>
      
    
    
    
    <category term="说说" scheme="https://blog.goodboyboy.top/categories/%E8%AF%B4%E8%AF%B4/"/>
    
    
    <category term="Minecraft" scheme="https://blog.goodboyboy.top/tags/Minecraft/"/>
    
    <category term="Debian" scheme="https://blog.goodboyboy.top/tags/Debian/"/>
    
  </entry>
  
  <entry>
    <title>Debian KDE使用指纹传感器验证身份</title>
    <link href="https://blog.goodboyboy.top/posts/2384332514.html"/>
    <id>https://blog.goodboyboy.top/posts/2384332514.html</id>
    <published>2025-06-09T15:34:39.000Z</published>
    <updated>2025-06-09T15:34:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装依赖">安装依赖</h2><p>Debian默认没有安装指纹依赖包，需要手动安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install fprintd libpam-fprintd</span><br></pre></td></tr></table></figure><p><code>fprintd</code>库用于让系统支持指纹传感器<br><code>libpam-fprintd</code>库用于配置系统身份认证方式</p><h2 id="安装指纹传感器驱动">安装指纹传感器驱动</h2><p>一般传感器厂商会提供deb包或者使用通用驱动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install deb驱动包文件路径</span><br></pre></td></tr></table></figure><h2 id="添加指纹">添加指纹</h2><p>在<code>设置</code>-&gt;<code>用户</code>中，点击用户后会有一栏<code>配置指纹身份认证</code>，点击后即可添加指纹。</p><p><img src="https://pic.goodboyboy.top/imgs/2025/06/10/d5jfy.webp" alt="添加指纹"></p><p>当然也可以通过<code>fprintd-enroll</code>命令来添加指纹。</p><h2 id="添加身份认证方式">添加身份认证方式</h2><p>输入下面命令进入pam管理页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pam-auth-update</span><br></pre></td></tr></table></figure><p>使用方向键以及空格键勾选<code>Fingerprint authentication</code>，回车完成设置。</p><h2 id="修改登陆逻辑（KDE桌面需要）">修改登陆逻辑（KDE桌面需要）</h2><p>因为登陆界面认证时会将密码用于解锁系统密码库，指纹认证没有提供密码，导致卡登陆界面（无论指纹或者密码是否正确）。</p><p>可能是KDE的SDDM逻辑问题，即使注释掉解锁密码库，在登陆界面指纹验证失败后也会导致卡登陆界面（不会再次调起指纹并且输入正确密码无效），指纹认证成功则不会卡。</p><p>整个逻辑就像并没有为多认证方式进行设计，或者根本没有考虑指纹登陆的情况一样（虽然设置界面确实是写了<code>暂不支持使用指纹登陆系统</code>）。</p><p>不过系统终端以及锁屏界面均可以通过指纹或密码的方式完成身份验证。</p><p>因此这里需要手动取消掉登陆界面的指纹功能来避免卡登陆。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/pam.d/sddm</span><br></pre></td></tr></table></figure><p>找到<code>@include common-auth</code>一行注释掉，该行引用的配置包括了指纹认证的逻辑</p><p>因为<code>common-auth</code>被很多pam配置引用，因此我们这里不动它，而是为<code>sddm</code>手动构建一个auth流程。</p><p>在被注释的common-auth一行下添加下面内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auth    <span class="section">[success=1 default=ignore]</span>      pam_unix.so nullok try_first_pass</span><br><span class="line">auth    requisite                       pam_deny.so</span><br><span class="line">auth    required                        pam_permit.so</span><br></pre></td></tr></table></figure><p>内容其实就是未开启指纹认证的时候common-auth的文件内容。</p><p>这样在开机登陆时使用原先的密码进行登陆，在终端和锁屏界面，或者其他需要身份认证的地方都可以使用指纹和密码进行认证。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装依赖&quot;&gt;安装依赖&lt;/h2&gt;
&lt;p&gt;Debian默认没有安装指纹依赖包，需要手动安装&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.goodboyboy.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Software" scheme="https://blog.goodboyboy.top/categories/Software/"/>
    
    
    <category term="Debian" scheme="https://blog.goodboyboy.top/tags/Debian/"/>
    
    <category term="KDE" scheme="https://blog.goodboyboy.top/tags/KDE/"/>
    
  </entry>
  
  <entry>
    <title>浅尝Debian KDE桌面</title>
    <link href="https://blog.goodboyboy.top/posts/1593855977.html"/>
    <id>https://blog.goodboyboy.top/posts/1593855977.html</id>
    <published>2025-06-07T03:54:00.000Z</published>
    <updated>2025-06-07T03:54:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>最近入手了一个128G的闪迪U盘，读速400MB/s,写入实测80MB/s，4k写入3MB/s，刚好了解到KDE桌面还不错，打算把他用来装Debian玩玩。</p><h2 id="系统安装">系统安装</h2><p>和普通的Debian安装没什么不同，不过这次用的是在线安装的小镜像。</p><p>事实证明就应该下完整镜像，莫名其妙补了一堆用不到的软件，花了40多分钟。。。</p><p>因为是装在U盘里，并且有可能有移动需求，从数据安全的角度来说我还是倾向于使用全盘加密</p><p>虽然之前在另一个U盘里装Debian启用全盘加密后导致性能大跌，但这次U盘性能好一些，应该没有什么大问题（确信</p><p>主要是不启用全盘加密真的不敢存放隐私数据（U盘丢失概率比笔记本大多了）</p><p>密码设置没有太复杂，没有使用密码库软件生成的密码，这只是为了防丢，不是为了对抗，没必要设置太复杂的密码麻烦自己。</p><h2 id="进入桌面">进入桌面</h2><p>不得不说，linux启动就是比windows快，1s引导，2s进桌面，开机总共3s</p><p>进入桌面后，KDE给我的感觉是非常好看，简约但不失优雅。</p><p><img src="https://pic.goodboyboy.top/imgs/2025/06/07/kckpkt.webp" alt="优雅的桌面"></p><p>桌面各种动画都有，最关键的是，比windows那奇怪的动画流畅多了</p><p>和GNOME的简约过头相比，KDE可以高度自定义桌面，虽然网上有些人说设置太多导致眼花缭乱，但我个人觉得刚刚好，默认的设置也完全够用</p><p>GNOME改个什么设置还要装插件，麻烦的要命。。。</p><p><img src="https://pic.goodboyboy.top/imgs/2025/06/07/lrj5nd.webp" alt="系统信息"></p><p>不同的主题，感觉都很好看</p><p><img src="https://pic.goodboyboy.top/imgs/2025/06/07/12f9fem.webp" alt="PurPurDay Global 5桌面"><br><img src="https://pic.goodboyboy.top/imgs/2025/06/07/12faf4p.webp" alt="PurPurDay Global 5窗口"><br><img src="https://pic.goodboyboy.top/imgs/2025/06/07/12fbozs.webp" alt="PurPurNight Global 5桌面"><br><img src="https://pic.goodboyboy.top/imgs/2025/06/07/12fc3b2.webp" alt="PurPurNight Global 5窗口"><br><img src="https://pic.goodboyboy.top/imgs/2025/06/07/12fcx9w.webp" alt="Motto Dark Global 5桌面"></p><h2 id="软件安装">软件安装</h2><p>这个没得说，虽然有discover这类应用商店，但对国内用户不友好，下载慢而且很多软件没有（例如QQ,微信等）</p><p>目前一般有两种方式，使用deb包或者appimage包。</p><p>deb包需要使用命令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install deb包文件位置</span><br></pre></td></tr></table></figure><p>appimage包则双击就能直接用了</p><p>我优先使用deb包安装，没有deb包就下appimage包</p><p>装一些国产软件有一些小坑，例如qq音乐要在快捷方式参数加上<code>--no-sandbox</code>才能启动，微信要手动安装一个依赖才能启动，感觉QQ反而是支持的最好的了（QQ NT跨平台能力太强了），虽然我讨厌塞浏览器内核这种行为，但在跨平台方面确实效果不错。</p><p>浏览器我选择librewolf，安装稍微复杂一点，不过也没有多大困难</p><p>其实像这些有deb包的都很好安装，依赖什么的都会自动补全，appimage更是想删就删，像mac那样直接拖进废纸篓（右键删除）就完成卸载了。</p><p>最难安装的还是需要自行编译的软件，不过这类软件如果是小白用户一般也很难遇到咯</p><p>由于我有智能卡的需求，需要安装opensc来让某些APP（例如vera crypt、thunderbird）支持读取智能卡，官方release只有msi和exe，linux用户需要自己编译（泪目了🥹）</p><p>不过好在官方编译文档比较完善，编译也就make一下</p><h2 id="软件代替">软件代替</h2><p>部分软件在linux上没有，只能找找平替的了</p><p>android studio，IDEA之类的倒是有Debian版</p><p>但是像affinity，Git Extension之类的就暂时没找到完美的平替</p><p>自带的GIMP虽然说功能强大，但是那个界面真的一言难尽，有一种10年左右的UI风格（个人觉得）</p><h2 id="兼容性问题">兼容性问题</h2><p>这方面感觉Debian做的已经很不错了，开箱即用，目前没有手动打任何驱动（NVIDIA驱动不打算打），WIFI，蓝牙，显示器，触控板都能正常使用，而且居然还能调节键盘背光亮度，系统上暂时没有出现兼容性问题（Deepin之前登陆页面出现兼容性问题，屏幕发绿，不知道现在解决了没）</p><p>目前暂时不打算打NVIDIA驱动，装这个系统本来就是打算用作外出没带充电器时延长笔记本使用时间用的</p><p>更多的其实还是软件上的兼容性问题，QQ的桌面通知可以正常显示，但是没有通知铃声，而tg却能正常触发铃声。</p><p>另外QQ的截图功能用不了，这个貌似是Wayland的问题，之后再看看怎么解决吧。</p><p>QQ音乐的桌面歌词不能置顶显示，以至于开了和没开一样，系统的音乐控制控制不了QQ音乐 ，只能在QQ音乐界面切换音乐。</p><p>thunderbird的OpenPGP加密邮件不支持外置智能卡，并且通过opensc读取智能卡可以读取到证书，但是发邮件时就读取不了，虽然内置的KMail支持系统的OpenPGP实现，但是界面没thunderbird好看（doge</p><h2 id="续航">续航</h2><p>实测在打开QQ音乐，librewolf浏览器，vscode，刷新率60Hz，重启机器3次情况下，持续使用2个小时仍有48%的电量</p><p>电池健康度为76%，电池初始容量为90Wh。</p><p>平常windows 11下3小时刚好用完。</p><p>综合下来延长续航效果还是有的。</p><h2 id="打印机问题">打印机问题</h2><p>linux下只要不要我碰驱动一切好说，一旦碰驱动就一言难尽。</p><p>实验室的那台打印机用不了，系统自带的驱动虽然已经识别出来了打印机型号，但是打印测试页失败。</p><p>之前打算给这台打印机弄个cups结果也是打印失败。</p><p>去hp官网下载驱动安装失败，有些包找不到，应该是Debian 12太新了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近入手了一个128G的闪迪U盘，读速400MB/s,写入实测80MB/s，4k写入3MB/s，刚好了解到KDE桌面还不错，打算把他用来装Debian玩玩。&lt;/p&gt;
&lt;h2 id=&quot;系统安装&quot;&gt;系统安装&lt;/h2&gt;
&lt;p&gt;和普通的Deb</summary>
      
    
    
    
    <category term="说说" scheme="https://blog.goodboyboy.top/categories/%E8%AF%B4%E8%AF%B4/"/>
    
    
    <category term="Debian" scheme="https://blog.goodboyboy.top/tags/Debian/"/>
    
    <category term="KDE" scheme="https://blog.goodboyboy.top/tags/KDE/"/>
    
  </entry>
  
  <entry>
    <title>暑假任务安排</title>
    <link href="https://blog.goodboyboy.top/posts/1255618844.html"/>
    <id>https://blog.goodboyboy.top/posts/1255618844.html</id>
    <published>2025-06-02T05:27:39.000Z</published>
    <updated>2025-06-02T05:27:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正文">正文</h2><p>今年暑假打算留校不回去了，暂且安排一下暑假的任务免得忘记</p><div class="note info flat"><p>Fast Auth可能要暑假才能继续开工，<s>最近没动力写（逃</s></p></div><h2 id="任务">任务</h2><ul><li>[ ] Fast Auth开发</li><li>[ ] 工大助手开发</li><li>[ ] Mojang API重构</li><li>[ ] Minecraft Launcher Library重构</li><li>[ ] 市政府实习</li><li>[ ] 中级软件工程师备考</li><li>[ ] 教资备考</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;
&lt;p&gt;今年暑假打算留校不回去了，暂且安排一下暑假的任务免得忘记&lt;/p&gt;
&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;Fast Auth可能要暑假才能继续开工，&lt;s&gt;最近没动力写（逃&lt;/s&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2 i</summary>
      
    
    
    
    <category term="说说" scheme="https://blog.goodboyboy.top/categories/%E8%AF%B4%E8%AF%B4/"/>
    
    
    <category term="说说" scheme="https://blog.goodboyboy.top/tags/%E8%AF%B4%E8%AF%B4/"/>
    
    <category term="任务安排" scheme="https://blog.goodboyboy.top/tags/%E4%BB%BB%E5%8A%A1%E5%AE%89%E6%8E%92/"/>
    
    <category term="暑假" scheme="https://blog.goodboyboy.top/tags/%E6%9A%91%E5%81%87/"/>
    
  </entry>
  
  <entry>
    <title>突然发现自己身体还是蛮脆弱的😂</title>
    <link href="https://blog.goodboyboy.top/posts/4055500940.html"/>
    <id>https://blog.goodboyboy.top/posts/4055500940.html</id>
    <published>2025-05-31T12:51:20.000Z</published>
    <updated>2025-05-31T12:51:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正文">正文</h2><p>今天和学弟在一个郊区的公园散步，结果在过一个拱桥的时候，往下走那个阶梯的时候一脚踩空，直接摔了个狗吃屎（悲）</p><p>两脚的膝盖直接撞在阶梯拐角那，疼死我了。。。</p><p>不过当时穿的长裤，看不到伤情，继续和学弟逛了一会。</p><p>晚上回去感觉越来越痛，每动一下裤子布料就磨一下那个地方。回到寝室，看了一下，不出意外的青了😢，还有一片被磕出来的红斑，腿肚子上的红斑更长。</p><p>普通的一摔就磕成这样，果然人的身体还是不耐造（悲</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;
&lt;p&gt;今天和学弟在一个郊区的公园散步，结果在过一个拱桥的时候，往下走那个阶梯的时候一脚踩空，直接摔了个狗吃屎（悲）&lt;/p&gt;
&lt;p&gt;两脚的膝盖直接撞在阶梯拐角那，疼死我了。。。&lt;/p&gt;
&lt;p&gt;不过当时穿的长裤，看不到伤情，继续和学弟逛了一会。</summary>
      
    
    
    
    <category term="说说" scheme="https://blog.goodboyboy.top/categories/%E8%AF%B4%E8%AF%B4/"/>
    
    
    <category term="说说" scheme="https://blog.goodboyboy.top/tags/%E8%AF%B4%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>完成GitHub学生认证</title>
    <link href="https://blog.goodboyboy.top/posts/1315496079.html"/>
    <id>https://blog.goodboyboy.top/posts/1315496079.html</id>
    <published>2025-05-31T12:23:15.000Z</published>
    <updated>2025-05-31T12:23:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>前几天发现GitHub Pro好像可以免费使用GitHub Copilot，然后学生认证的话可以免费使用GitHub Pro计划，打算认证一下尝尝咸淡。</p><h2 id="认证">认证</h2><p>感觉认证也不麻烦（前提是你是真学生），教育邮箱+学生证照片+允许网站定位就可以了。完全不需要像网上那种搞个学信网学籍证明，还整个英文版的什么的。</p><p>我学生证上面的章都模糊的看不清是哪个学校了😂，只隐隐约约看得出是个章</p><p>不过从approve状态转变为Coupon applied花了实实在在的三天（说最长要72小时还真用了72小时啊😂）</p><p><img src="https://pic.goodboyboy.top/imgs/2025/05/31/xh7wx0.webp" alt="认证成功"></p><h2 id="GitHub-Copilot">GitHub Copilot</h2><p>美美使用GitHub Copilot</p><p><img src="https://pic.goodboyboy.top/imgs/2025/05/31/xlaieg.webp" alt="GitHub Copilot"></p><p>Copilot Pro除了GPT-4.5和o3用不了，其他都可以用（GPT-4.5的定价属实是有的癫了）</p><p>每个月有300次的高级请求</p><p>请求乘数如下：</p><table><thead><tr><th>模型</th><th>高级请求</th></tr></thead><tbody><tr><td>基本模型（当前为 GPT-4.1）</td><td>0（付费用户），1（Copilot Free）</td></tr><tr><td>高级 GPT-4.1</td><td>1</td></tr><tr><td>GPT-4o</td><td>1</td></tr><tr><td>GPT-4.5</td><td>50</td></tr><tr><td>Claude 3.5 Sonnet</td><td>1</td></tr><tr><td>Claude 3.7 Sonnet</td><td>1</td></tr><tr><td>Claude 3.7 Sonnet Thinking</td><td>1.25</td></tr><tr><td>Gemini 2.0 Flash</td><td>0.25</td></tr><tr><td>Gemini 2.5 Pro</td><td>1</td></tr><tr><td>o1</td><td>10</td></tr><tr><td>o3</td><td>5</td></tr><tr><td>o3-mini</td><td>0.33</td></tr><tr><td>o4-mini</td><td>0.33</td></tr></tbody></table><p>也就是说一个月差不多可以免费使用300次Claude 3.7 Sonnet模型，使用基本模型的话（目前是GPT-4.1）则是无限次😎</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;前几天发现GitHub Pro好像可以免费使用GitHub Copilot，然后学生认证的话可以免费使用GitHub Pro计划，打算认证一下尝尝咸淡。&lt;/p&gt;
&lt;h2 id=&quot;认证&quot;&gt;认证&lt;/h2&gt;
&lt;p&gt;感觉认证也不麻烦（前提是你</summary>
      
    
    
    
    <category term="说说" scheme="https://blog.goodboyboy.top/categories/%E8%AF%B4%E8%AF%B4/"/>
    
    
    <category term="GitHub" scheme="https://blog.goodboyboy.top/tags/GitHub/"/>
    
    <category term="学生认证" scheme="https://blog.goodboyboy.top/tags/%E5%AD%A6%E7%94%9F%E8%AE%A4%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>[公告]音乐馆重新上线</title>
    <link href="https://blog.goodboyboy.top/posts/1639439830.html"/>
    <id>https://blog.goodboyboy.top/posts/1639439830.html</id>
    <published>2025-05-25T16:17:50.000Z</published>
    <updated>2025-05-25T16:17:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正文">正文</h2><p>时隔一年，音乐馆功能重新上线😁，目前部分分类还在施工，不过不影响使用。</p><p>打开方式：</p><p><a href="https://blog.goodboyboy.top/music/">https://blog.goodboyboy.top/music/</a></p><p>或者在顶部菜单里找到<code>页面</code>-&gt;<code>音乐馆</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;
&lt;p&gt;时隔一年，音乐馆功能重新上线😁，目前部分分类还在施工，不过不影响使用。&lt;/p&gt;
&lt;p&gt;打开方式：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.goodboyboy.top/music/&quot;&gt;https://blog.go</summary>
      
    
    
    
    <category term="公告" scheme="https://blog.goodboyboy.top/categories/%E5%85%AC%E5%91%8A/"/>
    
    
    <category term="公告" scheme="https://blog.goodboyboy.top/tags/%E5%85%AC%E5%91%8A/"/>
    
    <category term="音乐馆" scheme="https://blog.goodboyboy.top/tags/%E9%9F%B3%E4%B9%90%E9%A6%86/"/>
    
  </entry>
  
  <entry>
    <title>[活动]送你一张明信片（长期有效）</title>
    <link href="https://blog.goodboyboy.top/posts/3994121440.html"/>
    <id>https://blog.goodboyboy.top/posts/3994121440.html</id>
    <published>2025-05-20T05:37:11.000Z</published>
    <updated>2025-05-20T06:08:04.988Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>最近加入了<a href="https://www.postcrossing.com">Postcrossing</a>平台，看到《<a href="https://pwsz.com/hobby/4493.html">方寸间、自有天地：一张明信片的故事</a>》，感受到了明信片的魅力，因此特开一文用于明信片交换，如果有喜欢明信片的朋友，可以通过下发方式将指定格式的信息发送给我哦，收到信息后我会尽快安排邮寄😁~</p><p>目前已发布的明信片样式可以在这篇文章里找到《<a href="/posts/1630314981.html">博客明信片v2版发布啦，喜欢就快来申请一张吧！</a>》</p><h2 id="信息内容格式">信息内容格式</h2><ul><li>收信人（必填，用于填写收信人一栏）</li><li>地址（必填，用于填写收信地址）</li><li>邮编（必填）</li><li>联系电话（选填，送达后邮递员可能会通过该手机号联系您）</li><li>网名（选填，用于写信内容）</li><li>Email（选填，用于告知投递情况）</li><li>博客网址（选填，用于展示您的博客信息）</li><li>明信片样式（选填，默认随机样式）</li></ul><h2 id="信息发送方式">信息发送方式</h2><h3 id="Email">Email</h3><p>将上方信息通过Email发送至me#goodboyboy.top（将#换成@）</p><div class="note warning flat"><p>因为包含隐私信息，建议发送邮件前使用博主公开的 <a href="https://www.goodboyboy.top/public-key.pub">OpenPGP 公钥</a>对其进行加密（公钥指纹： <code>7B49 3862 FEFB 5A10 B875 4458 391C C423 AEFF 3B06</code>），已和博主有邮件往来的也可以使用博主的 S/MIME 证书对其进行加密。</p></div><h3 id="评论区留言">评论区留言</h3><p>将上方信息在留言至本篇文章底部评论区</p><div class="note warning flat"><p>评论为公开内容，请务必在留言前使用博主的OpenPGP公钥对其进行加密，否则不建议使用该方式。</p></div><h2 id="信息保存">信息保存</h2><div class="note success flat"><p>提供的信息仅用于发送明信片，在投递后预计会保留一周左右，用于补寄等特殊情况。</p></div><h2 id="参与展示">参与展示</h2><table><thead><tr><th>序号</th><th>参与人/博主</th><th>状态</th></tr></thead><tbody><tr><td>1</td><td><a href="https://www.iczrx.cn/">晚夜</a></td><td>已寄出</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近加入了&lt;a href=&quot;https://www.postcrossing.com&quot;&gt;Postcrossing&lt;/a&gt;平台，看到《&lt;a href=&quot;https://pwsz.com/hobby/4493.html&quot;&gt;方寸间、自有天地</summary>
      
    
    
    
    <category term="生活" scheme="https://blog.goodboyboy.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="明信片" scheme="https://blog.goodboyboy.top/categories/%E6%98%8E%E4%BF%A1%E7%89%87/"/>
    
    
    <category term="明信片" scheme="https://blog.goodboyboy.top/tags/%E6%98%8E%E4%BF%A1%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>加入Postcrossing！</title>
    <link href="https://blog.goodboyboy.top/posts/603686180.html"/>
    <id>https://blog.goodboyboy.top/posts/603686180.html</id>
    <published>2025-05-20T05:15:35.000Z</published>
    <updated>2025-05-20T05:15:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-is-Postcrossing">What is Postcrossing?</h2><div class="note info flat"><p>这个项目的目标是让任何人都能从世界各地发送和接收明信片！<br>这个想法很简单： 每发送一张明信片，你就会从世界某个随机的明信片交换者那里收到一张明信片 。</p><p>The goal of this project is to allow anyone to send and receive postcards from all over the world!<br>The idea is simple: for each postcard you send, you will receive one back from a random postcrosser from somewhere in the world.</p></div><h2 id="Why">Why</h2><div class="note info flat"><p>简单来说，因为像它的创始人一样，有很多人喜欢收到真实的邮件。<br>从世界各地收到明信片（很多地方你可能之前从未听说过！）可以把你的邮箱变成一个惊喜的盒子——难道还有人不喜欢这样吗？</p><p>Simply because, like its founder, there are lots of people who like to receive real mail.<br>Receiving postcards from different places in the world (many of which you probably have never heard of!) can turn your mailbox into a box of surprises — and who wouldn’t like that?</p></div><h2 id="正文">正文</h2><p>无意间看到<a href="https://pwsz.com">扶苏</a>的一篇文章《<a href="https://pwsz.com/hobby/4493.html">方寸间、自有天地：一张明信片的故事</a>》，了解到了<a href="https://www.postcrossing.com">Postcrossing</a>这个平台。</p><p>再加之昨天收到了<a href="https://www.iczrx.cn/">晚夜</a>的BQSL，想着一张明信片能够飘洋过海，成功到达对方的手里，是一件多么幸运和有趣的事</p><p>即使是国内之间的快递，都不能保证百分百能够到达目的地，更别说是普通的平信，还是国际邮件。我觉得，这是一件非常有意义的事情。</p><h2 id="后记">后记</h2><p>申请了Postcrossing第一次的Postcard，目的地是是Russian，预计会在这几天发出😄</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;What-is-Postcrossing&quot;&gt;What is Postcrossing?&lt;/h2&gt;
&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;这个项目的目标是让任何人都能从世界各地发送和接收明信片！&lt;br&gt;
这个想法很简单： 每发送一张明信片，你</summary>
      
    
    
    
    <category term="生活" scheme="https://blog.goodboyboy.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="明信片" scheme="https://blog.goodboyboy.top/categories/%E6%98%8E%E4%BF%A1%E7%89%87/"/>
    
    
    <category term="明信片" scheme="https://blog.goodboyboy.top/tags/%E6%98%8E%E4%BF%A1%E7%89%87/"/>
    
    <category term="Postcrossing" scheme="https://blog.goodboyboy.top/tags/Postcrossing/"/>
    
  </entry>
  
  <entry>
    <title>今天收到了BQSL卡片</title>
    <link href="https://blog.goodboyboy.top/posts/512081334.html"/>
    <id>https://blog.goodboyboy.top/posts/512081334.html</id>
    <published>2025-05-19T05:59:52.000Z</published>
    <updated>2025-05-19T06:30:32.431Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><p>BLOG QSL CARD ，中文名：博客QSL卡片，为防止与业余无线电中的QSL卡片混为一谈，所以将博客QSL卡片简称为BQSL卡片，实质为一种明信片，尺寸大小：140mm x 90mm</p><p>作用：可用于友站之间呼唤或者供游客申领，能够加强站点与来访游客或者友站的联系</p><p>设计规范：背面应注明日期时间，即访问博客的日期时间；写上HTTP状态码；IS代表网站速度，用时间代替速度，即用户打开网站到加载全部完成的时间；NAME代表网站名称；URL代表网站地址。</p><p>详情-&gt;《<a href="https://www.iczrx.cn/archives/150/">[BQSL]BLOG QSL卡片详解及免费申领（附预览图</a>》</p></div><h2 id="收信">收信</h2><p>今天终于收到了博主<a href="https://www.iczrx.cn/">晚夜</a>的BQSL卡</p><p>看了一下邮戳，4月29号博主所在市的邮戳，5月3号本市的邮戳，然而5月19号也就是今天我才收到我们学校收发室取信的短信通知。。。</p><p>算了懒得喷了</p><h2 id="小插曲">小插曲</h2><p>我申请时填写的是我网名GoodBoyboy，一进收发室那个负责人问我叫什么名字</p><p>我：？？？</p><p>有点小尴尬哈，不过我急中生智，先讲了我自己的名字，看到他正在一个本子上找我的名字，于是赶忙走过去找名字</p><p>因为其他都是中文，一下就看到了我的英文</p><p>负责人：咿呀，还是英文名，下次写你自己的名字咯</p><p>我：（尴尬）</p><p>然后负责人说让我签名，他帮我找</p><p>我就把GoodBoyboy签上了，负责人找到后看了下签名</p><p>负责人：哎呀，你签你的汉名咯</p><p>我：（尴尬）（默默签下名字）（赶紧逃离）</p><p>下次再也不填网名了，真的要命😿</p><h2 id="卡片">卡片</h2><p>很好看的卡片</p><p><img src="https://pic.goodboyboy.top/imgs/2025/05/19/nllucb.webp" alt="信封"></p><p><img src="https://pic.goodboyboy.top/imgs/2025/05/19/nlrxrr.webp" alt="卡片"></p><h2 id="后记">后记</h2><p>之后填到具体邮筒+使用中文化名得了，还以为邮路不通只能发不能收呢</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;BLOG QSL CARD ，中文名：博客QSL卡片，为防止与业余无线电中的QSL卡片混为一谈，所以将博客QSL卡片简称为BQSL卡片，实质为一种明信片，尺寸大小：140mm x 90mm&lt;/p&gt;
&lt;p&gt;作用：可用于友</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>好用的CloudFlare Tunnel，使我大脑旋转</title>
    <link href="https://blog.goodboyboy.top/posts/3954763362.html"/>
    <id>https://blog.goodboyboy.top/posts/3954763362.html</id>
    <published>2025-05-18T09:08:02.000Z</published>
    <updated>2025-05-18T09:08:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="致谢">致谢</h2><p>CloudFlare真的是赛博活佛😍</p><h2 id="起因">起因</h2><p>无聊看了几篇写CF Tunnel的文章，发现用来内外穿透效果还不错？（仅对于Web网站，游戏联机就不要想了）</p><p>虽然自己也有服务器可以搭建Frp进行穿透，但一个是配置麻烦，更改配置还需要重启Frpc，另外也不想什么都通过主服务器穿透，万一哪天主服务器被打进黑洞了超麻烦（阿里云的鸡一摸就死，服务还没死呢就给你扔黑洞去了）</p><p>更何况有些服务自带的验证安全程度还达不到我的要求，例如cockpit，仅仅是验证主机的Linux账户密码（为了防止自己锁自己，宿舍服务器密码没有用keepass生成），1panel还好，我用keepass，但是为了方便没开2fa。</p><p>这就导致离开寝室局域网后将无法控制我的宿舍服务器，只能使用部分映射出来的服务。</p><p>前几天就因为宿舍忘记交电费意外断电后我忘记启动kvm上挂的实验环境，导致实验室的学弟用不了虚拟机，当时在实验室也没办法远程启动，只能等我回寝室后登录后台启动</p><h2 id="play">play</h2><p>CF Tunnel现在被归类到Zero Trust内</p><p>目前我用过的就3个大块：Gateway，Access，网络</p><p>Gateway管理的就是原来的warp以及warp+，不过现在大陆已经用不了了</p><p>CF Tunnel则在网络内</p><h3 id="安装客户端与创建隧道">安装客户端与创建隧道</h3><p>首先需要安装cloudflared，这里为了方便管理我选择的docker安装</p><p>按照官方给出的含token的命令创建好容器后，将容器网络改为<code>host</code>方便访问主机内各个服务</p><p>建议一个隧道对应一个主机，一个主机只需要创建一个隧道就行</p><h3 id="创建公共主机名">创建公共主机名</h3><p>这里就是配置具体服务（有点类似配置反向代理）</p><p><strong>子域</strong>配置的是公共访问地址，访问内网服务就访问该地址</p><p><strong>类型</strong>配置的是内网具体是什么服务，cloudflare如何访问你的内网服务，和设置CDN差不多，只是说CDN的话如果设置HTTP，那cf到你源服务器的流量就真的是完全未加密，而Tunnel默认是完全加密的</p><blockquote><p>Tips:一个常见小坑是，源服务开启HTTPS并开启HTTP自动跳转HTTPS，但CF后端地址却填写的HTTP协议，这会造成无限跳转，无论用户访问是HTTPS还是HTTP。因为当流量从cf流向源服务器时进入的是80端口，源服务器会返回一个301跳转指向HTTPS，客户端收到301并继续跳转访问，然后流量继续从cf流向源服务器的80端口，无限循环。</p></blockquote><div class="note info flat"><p>一个大坑：如果你是用的docker部署，后端协议选的HTTPS的话，下发的配置默认不会带originServerName，导致cf会把源服务器返回的证书SNI与你填写的后端地址进行对比。一般来说本地服务都会填写127.0.0.1或者localhost，这就会导致<code>remote error: tls: internal error&quot;</code>，解决方案一个是开启<code>noTLSVerify</code>，不要验证TLS证书，一个是填写<code>源服务器名称</code>，而且我发现填写一次后哪怕之后删掉，也不会出现这个问题了。</p></div><p>创建完后就可以愉快的使用公共主机名地址访问了</p><h3 id="添加Access">添加Access</h3><p>用来管理访问策略</p><h3 id="策略">策略</h3><p>可以先创建一些策略，例如ban掉海外ip，仅允许自己的邮箱访问等等</p><h3 id="应用程序">应用程序</h3><p>这里就对应之前的公共主机名，一个公共主机名可以对应一个应用程序（虽然设置上可以对应多个）</p><p><code>应用程序名称</code>爱怎么填怎么填</p><p><code>公共主机名</code>内容和服务公共主机名一致</p><p>然后在策略一栏选择自己创建的策略</p><p><code>登录方法</code>默认的只有向邮箱发送一次性OTP代码的选项，不过支持很多第三方OAuth，例如github，google等，还支持自定义openid connect，可以对接我自己部署的zitadel</p><p>不过自从隔壁博主的casdoor出现 <a href="https://blog.moeworld.tech/2025/05/09/cve-2025-4210-casdoor-v1-811-0-unauthenticated-scim-operations/">CVE-2025-4210 Casdoor &lt;=v1.811.0 - Unauthenticated SCIM Operations</a>导致 <a href="https://blog.moeworld.tech/2025/05/08/%e3%80%90%e8%ad%a6%e5%91%8a%e3%80%91%e6%88%91%e4%bb%ac%e6%b3%a8%e6%84%8f%e5%88%b0moeworld-tech%e5%8f%91%e7%94%9f%e4%ba%86%e9%82%ae%e4%bb%b6%e7%9b%97%e7%94%a8%e7%8e%b0%e8%b1%a1/">【警告】我们注意到moeworld.tech发生了邮件盗用现象</a>后，我就有点不敢用自托管的统一身份认证了，在这种可能会危及到内网安全的重要服务上还是算了，邮件OTP也不是不行</p><p>目前市面上常见的IAM基本上都会有角色控制功能，不仅仅提供IdP的功能，也就是说应用开发可以完全不需要自己独立的账户权限管理功能而依赖IAM，但一旦IAM出现问题那就不好玩了</p><p>创建完应用程序后在Tunnel内的公共主机名进行绑定即可</p><h2 id="后记">后记</h2><p>这下内网一些私密服务可以通过Tunnel+Access暴露出来了🥰</p><p>至于网站访问速度，虽然延迟有点高，但至少可以正常访问，不像CF的CDN，正常访问都是挑战</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;致谢&quot;&gt;致谢&lt;/h2&gt;
&lt;p&gt;CloudFlare真的是赛博活佛😍&lt;/p&gt;
&lt;h2 id=&quot;起因&quot;&gt;起因&lt;/h2&gt;
&lt;p&gt;无聊看了几篇写CF Tunnel的文章，发现用来内外穿透效果还不错？（仅对于Web网站，游戏联机就不要想了）&lt;/p&gt;
&lt;p&gt;虽然自己也有服务</summary>
      
    
    
    
    <category term="说说" scheme="https://blog.goodboyboy.top/categories/%E8%AF%B4%E8%AF%B4/"/>
    
    
    <category term="CloudFlare" scheme="https://blog.goodboyboy.top/tags/CloudFlare/"/>
    
    <category term="Tunnel" scheme="https://blog.goodboyboy.top/tags/Tunnel/"/>
    
  </entry>
  
  <entry>
    <title>新注册furwolf.com域名</title>
    <link href="https://blog.goodboyboy.top/posts/2975776194.html"/>
    <id>https://blog.goodboyboy.top/posts/2975776194.html</id>
    <published>2025-05-17T06:04:14.000Z</published>
    <updated>2025-05-17T06:04:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>感谢&lt;<a href="http://blog.zrf.me">blog.zrf.me</a>&gt;博主的详细教程《<a href="https://blog.zrf.me/p/Google-Workspace-Domains/">超低价注册.COM域名：Google Workspace土耳其区仅需14元/年详细教程</a>》，成功使用75拉里（约等于13.93 人民币）拿下furwolf.com域名</p><p>稍后部分服务可能会迁移至新域名上</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;感谢&amp;lt;&lt;a href=&quot;http://blog.zrf.me&quot;&gt;blog.zrf.me&lt;/a&gt;&amp;gt;博主的详细教程《&lt;a href=&quot;https://blog.zrf.me/p/Google-Workspace-Domains/&quot;&gt;超低价注册.COM域名：Googl</summary>
      
    
    
    
    <category term="说说" scheme="https://blog.goodboyboy.top/categories/%E8%AF%B4%E8%AF%B4/"/>
    
    
    <category term="域名" scheme="https://blog.goodboyboy.top/tags/%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>恭喜邮储万事达储蓄卡加入卡包大家庭</title>
    <link href="https://blog.goodboyboy.top/posts/4196636881.html"/>
    <id>https://blog.goodboyboy.top/posts/4196636881.html</id>
    <published>2025-05-17T05:26:31.000Z</published>
    <updated>2025-05-17T05:26:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="展示">展示</h2><p><img src="https://pic.goodboyboy.top/imgs/2025/05/17/mhget3.webp" alt="卡面"></p><h2 id="前言">前言</h2><p>因为之前开的那张中信的万事达卡不能自动兑汇（不如不开。。。），最近又听说邮储的万事达卡现在支持线上支付了（强制3ds），去app一看确实没有“仅支持线下场景使用”的提示，于是打算办一张，不方便购汇的时候可以用。</p><h2 id="办理">办理</h2><p>一开始是去的校门口的支行，虽然不报什么希望，但是实在是懒得走那么远</p><p>结果可想而知——没有，不知道</p><p>好吧，直接去分行</p><p>但令我大吃一惊的是，分行居然也不知道有万事达储蓄卡</p><p>最后只能网申一张然后线下激活了</p><p>花了25块钱工本费用来网申</p><p>不过返了30微信立减金，但是我来回一趟花了5块路费，不亏不赚吧。。。</p><h2 id="激活">激活</h2><p>前天晚上拿到卡，昨天课比较多，今天去激活</p><p>来到大厅，签了一张法律告知书</p><p>然后就取号排队了</p><p>不得不说，虽然现在断卡行动还在继续，但是比前几年正常多了</p><p>现在你只要是本地+有正当理由+分行，几乎都是100%下卡，至于是一类还是二类要看银行，邮储貌似一般都只开二类</p><p>分行一般开的限额也高一些</p><p>去年我去招商开户都还需要我的学生证或者学信网，今天开只需要一张身份证即可</p><h2 id="小插曲">小插曲</h2><p>一开始还没开成功，绑微信绑不上，手机银行也绑不上</p><p>按理说手机银行怎么都可以绑上的，而且这卡好像都是23年9月出的，也不可能是系统没更新的原因</p><p>柜员小姐姐又查了一下账户，没看到新的那张卡</p><p>又在自助机上弄了一下，这次用的开通定制卡的方式，成功开卡</p><p>可能是之前用的开银联卡的方式所以开失败了</p><p>还有个小插曲就是绑定手机银行出现问题</p><p>微信是绑上去了，但是手机银行绑的时候要人脸验证，结果死活验证不过去，自助机上绑定的话需要拿原来的卡过来才行</p><p>不过好在最后还是人脸验证过了</p><h2 id="最后">最后</h2><p>最后小姐姐还负责的提醒我一定要合规使用银行卡，不要出借。</p><h2 id="后记">后记</h2><p>目前人民币支付可以正常交易，外币还没试，有空试一试，感受一下新万事达的自动兑汇（doge</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;展示&quot;&gt;展示&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.goodboyboy.top/imgs/2025/05/17/mhget3.webp&quot; alt=&quot;卡面&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;因为之前开的那张中信的万事达</summary>
      
    
    
    
    <category term="说说" scheme="https://blog.goodboyboy.top/categories/%E8%AF%B4%E8%AF%B4/"/>
    
    
    <category term="万事达" scheme="https://blog.goodboyboy.top/tags/%E4%B8%87%E4%BA%8B%E8%BE%BE/"/>
    
    <category term="邮储银行" scheme="https://blog.goodboyboy.top/tags/%E9%82%AE%E5%82%A8%E9%93%B6%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>服务器负载异常排查</title>
    <link href="https://blog.goodboyboy.top/posts/738568394.html"/>
    <id>https://blog.goodboyboy.top/posts/738568394.html</id>
    <published>2025-05-12T15:27:23.000Z</published>
    <updated>2025-05-12T15:27:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正文">正文</h2><p>最近感觉博客访问奇慢，前几天还只是博客打开有点慢，以为是CDN的问题便没怎么管，结果今天发现评论系统也间歇性加载不出来了，发现事情并不简单。</p><h2 id="排查">排查</h2><p>先登录了1panel面板，发现资源使用率高达170%，CPU也有70%（一般来说只会在20%左右）</p><p>马上切换到进程管理，发现openresty占用80%的CPU，第一反应是被打了</p><p>先暂时重启OpenResty，然后在查看网站日志，但看下来日志大小都都挺正常</p><p>然后就翻到了我们的老伙计Gitea，每一天的access.log高达10M+</p><p>第一反应就是又被哪个傻逼AI爬虫给到处爬（之前就有先例，直接把服务器爬死机），但我明明记得已经在CF开了拦截所有AI爬虫，并且把海外IP全ban了。</p><p>翻了下日志，发现请求内容全是Runner的请求，没有看到AI爬虫的</p><p>暂时有点摸不清问题所在</p><p>在监控面板看了下服务器最近的资源占用率情况</p><p>结果不看不知道，一看吓一跳</p><p><img src="https://pic.goodboyboy.top/imgs/2025/05/13/7aoy9.webp" alt="负载"></p><p><img src="https://pic.goodboyboy.top/imgs/2025/05/13/7gre8.webp" alt="负载"></p><p>平常没怎么看监控面板，而且这玩意图太有迷惑性了，不仔细看还以为是普通的请求造成的，把时间区间拉小一看，还以为是看心电图呢。。。</p><p>最难蚌的是最低资源使用率基本都是80%+</p><p>打算往前面翻翻，结果发现从有日志的时间开始（监控日志保存30天）就一直是这样了。。。</p><p>好吧属实是疏忽了，平常看这玩意运行挺稳的就没怎么管，push博客也是全自动Hook，没怎么登录服务器（doge</p><p>本来还想打算继续看看，突然反应又慢了起来</p><p>这次进程管理都进不去了，只好登ssh，开htop看看是哪个玩意在作妖</p><p>htop一看，redis。。。</p><p>再看了看那170%的IO，懂了</p><p>把redis暂时关掉，看了下磁盘IO监控，果不其然，也是心电图</p><p><img src="https://pic.goodboyboy.top/imgs/2025/05/13/7sf1h.webp" alt="磁盘IO监控"></p><p>这里大概已经知道是怎么回事了，不过还有一个点想不通，然后想到了Gitea的Runner</p><p>看了一下日志，每两分钟Runner会请求一次Gitea，虽然不知道为什么这会造成Gitea发癫，但结果应该大差不差了</p><h2 id="结论">结论</h2><p>Runner每两分钟请求一次Gitea</p><p>Gitea发癫</p><p>Redis被Gitea冲爆</p><p>Redis把内存占满</p><p>Debian疯狂向swap写</p><p>swap疯狂读写磁盘</p><p>众所周知，阿里云的轻量磁盘IO垃圾的一匹</p><p>因此导致IO延迟爆炸</p><p>外加MySQL助攻</p><p>最终导致资源使用率最高到达1280%，平均300%</p><h2 id="后记">后记</h2><p>暂时把redis和gitea关掉后服务器已经正常，因此问题就是出在Gitea上</p><p>1panel装的redis貌似默认有持久化，重启还没用，重启完载入数据库IO更加爆炸，只能手动flush，打个FLUSHALL命令花了21s才清空完数据库，不知道Gitea给redis塞了些什么玩意。。。</p><p>这个Runner还是我部署在华为云上的一个白嫖小鸡，当时感觉没啥可以部署的就部署了这玩意玩玩，结果给我整这一出</p><p>整个事件下来最让我绷不住的，是这个状态持续了好几个月，直到今天才明显感知出来，平常无论是Frp映射，还是发布博客，都没有任何感觉🤣，也是辛苦这台机了，2h2g，挂了一堆容器，还要塞个Gitea和MySQL</p>]]></content>
    
    
    <summary type="html">最近感觉博客访问奇慢，前几天还只是博客打开有点慢，以为是CDN的问题便没怎么管，结果今天发现评论系统也间歇性加载不出来了，发现事情并不简单。</summary>
    
    
    
    <category term="说说" scheme="https://blog.goodboyboy.top/categories/%E8%AF%B4%E8%AF%B4/"/>
    
    
    <category term="服务器" scheme="https://blog.goodboyboy.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>土区Apple Music发车记</title>
    <link href="https://blog.goodboyboy.top/posts/3499919502.html"/>
    <id>https://blog.goodboyboy.top/posts/3499919502.html</id>
    <published>2025-05-10T03:33:27.000Z</published>
    <updated>2025-05-10T03:33:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><div class="note info flat"><p>这篇文章算是半教程半记录吧</p></div><p>我同学昨天突然给我说想开am土区的家庭组，稍微查了一下，土区家庭组一个月59拉里，折合人民币11.02元（当前时间），一个车可以坐6个人（包括车主），平均下来一个人一个月1.83，这不比QQ音乐的8块钱香？于是开始狠狠查教程</p><h2 id="注册土区账户">注册土区账户</h2><p>苹果在这方面貌似管的不严，非土区IP+非土区电话都可以注册，只要国家一栏选土耳其就行</p><p>但是貌似是25年后苹果收紧注册后，网站上注册apple id一直注册不了（不仅是土区，国区也是）</p><p>后面在Linux do上面找到一个偏方，实测有效（但是貌似会根据ip确定国家地区，不过后面可以改）</p><p>原文在这里-&gt;《<a href="https://linux.do/t/topic/637468">注册美区/土区 Apple ID 方法(避开网页提示此时无法创建你的账户)</a>》</p><p>简单来说就是利用在iPhone设置里进入APP Tab，找到邮件这个软件，使用邮件这个app创建账户，可以完美解决问题</p><p>该方法注册的账户地区应该是根据ip自动选择的</p><p>然后在<a href="https://account.apple.com/">https://account.apple.com/</a>中更改国家地区为土耳其，账单地址找个土耳其地址生成器就行了</p><h2 id="充值">充值</h2><p>账户创建完成后就是入金</p><p>和大多数厂商一样，土区锁卡，只能绑定土耳其本地信用卡，但是兑换码渠道目前没有收紧（微软你看看人家），因此入金还是蛮简单的</p><p>进入<a href="https://oyunfor.com/">https://oyunfor.com/</a>，在oyunfor里面买app store充值卡，应该是土耳其本地网站，全部用拉里结算，所以虽然说一次购买手续费要2.99%，但买一张25拉里的充值卡也就0.6的手续费，折合人民币0.11元，这点手续费我还是给得起的（doge</p><p>oyunfor支持银联支付，但是那个支付方式的网站貌似要魔法才能访问，不过无所谓，反正我有外币卡（都是老顾客了doge）</p><p>先买了一张25的，怕apple搞事导致充不了</p><p>用同学的iPhone登录app store，然而app store这里卡半天，商店区域一直没切换到土区，充值卡用不了，结果我同学东点点，西点点，商店缓存刷新了，切换地区成功😂</p><p>然后就是充值入金，成功充值25拉里</p><h2 id="建立家庭组">建立家庭组</h2><p>第一次建立不知道要登录设置的apple id，以为是登录app store就行，结果车主变成我同学了（后面了解到乘坐人员貌似也能共享，不一定是要车主才能共享订阅（未验证））</p><p>然后就是复杂的切换账户</p><p>先是他在网站上登录他的美区id（原来是一个国区一个美区），改成土耳其区</p><p>然后把他的apple id退出，登录我新注册的土区id，最后建立家庭组并邀请他的土区id</p><p>接着退出我的土区id，登录他的土区id，接受邀请</p><h2 id="出现限制">出现限制</h2><p>登录他的土区id后，我直接在媒体登录那里改成了我的土区id，结果在apple music准备激活订阅时，提示</p><div class="note info flat"><p>This device is linked to another Apple Account.<br>You must transfer this device to your Apple Accoumt to join Apple Music.<br>You will be unable to transfer this device again for 90 days.</p></div><p>可能是切换账户太频繁了，我怕把他的账号搞得登不回去他的国区id，暂时停止操作</p><h2 id="安装黑苹果">安装黑苹果</h2><div class="note warning flat"><p>此为下下策，黑苹果使用不当容易导致封号！有真设备建议使用真设备</p></div><p>想了一下，主要是设备只有一台，切换太不方便，突然想到还可以黑苹果</p><p>网上装黑苹果麻烦主要是为了体验，所以到处折腾兼容性，但我只是为了登个apple id用设置这个app（doge</p><p>所以完全没问题😁</p><h3 id="打补丁">打补丁</h3><p>使用电脑上原本就装着VMware workstation 17 pro，这里只需要打个补丁就行</p><p>unlock工具-&gt;<a href="https://www.ittel.cn/archives/18529.html">https://www.ittel.cn/archives/18529.html</a></p><p>这里最高支持到macos 14</p><h3 id="下载镜像">下载镜像</h3><p>然后就是找镜像，有iso和dmg的，iso的可以直接引导，dmg还需要制作启动盘</p><p>对于我的目的来说什么镜像都无所谓，反正只是用来登录apple id，你藏点小木马也没啥，都是虚拟机</p><p>我这里使用的是dmg的方法（因为iso的镜像是百度网盘）</p><p>镜像下载地址-&gt;<a href="https://hackintosh.club/d/10000080">https://hackintosh.club/d/10000080</a></p><p>没有任何网盘会员的可以使用天翼网盘，完全不限速，爽</p><h3 id="制作启动盘（iso的可以跳过）">制作启动盘（iso的可以跳过）</h3><p>有刻录到U盘的方式，还有刻录到VHD（虚拟磁盘）的方式</p><p>U盘我倒是有，但是U盘性能太差了，比较赶时间（当时已经是凌晨快1点了），于是使用VHD的方式</p><p>教程地址-&gt;<a href="https://zhuanlan.zhihu.com/p/130692555">https://zhuanlan.zhihu.com/p/130692555</a></p><p>这里说一下，虚拟磁盘格式建议选VHDX，动态大小，不会浪费过多磁盘空间，并且是本机使用，不用考虑其他机器的兼容性</p><p>这里用的balenaEtcher需要是旧版本才能把文件刻录到虚拟磁盘上，教程评论区有，我这里单独搬出来一下：<a href="https://www.filehorse.com/download-etcher/37508/download/">https://www.filehorse.com/download-etcher/37508/download/</a></p><p>这里不得不说，两张固态之间文件复制就是快（dmg文件在D盘，虚拟vhdx文件在C盘，两个硬盘没有分区），烧录速度最高达到1000多MB/s，跑满我的致钛7100 plus的速度，一个13.5G的镜像十几秒就烧录完了</p><h3 id="创建虚拟机">创建虚拟机</h3><p>我在下载镜像的时候就创建了，这里记录一下</p><p>打好补丁后创建虚拟机，我留了60G给黑苹果，我只是用个设置app，并不是打算真的体验它，所以不会装其他任何软件，60G完全够</p><p>CPU，内存什么的按照自己情况分，分的越多越丝滑咯</p><p>硬盘上等烧录好后我们添加硬盘直接添加物理磁盘，磁盘就选择那块虚拟磁盘，挂载整个磁盘即可，如果是iso的镜像直接挂载iso镜像即可</p><div class="note info flat"><p>如果选择物理磁盘提示没有权限（哪怕点击下一步时已经给了管理员权限），先关闭VMware，然后右键快捷方式以管理员启动即可</p></div><p>然后就是注入三码（否则无法登录apple id）</p><p>找到虚拟机配置文件（后缀为vmx的文件），用记事本打开，加入类似如下的信息</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">board-id.reflectHost</span> = <span class="string">&quot;FALSE&quot;</span></span><br><span class="line"><span class="attr">board-id</span> = <span class="string">&quot;Mac-xxxxxxxxxxx&quot;</span></span><br><span class="line"><span class="attr">hw.model.reflectHost</span> = <span class="string">&quot;FALSE&quot;</span></span><br><span class="line"><span class="attr">hw.model</span> = <span class="string">&quot;MacBook Air&quot;</span></span><br><span class="line"><span class="attr">serialNumber.reflectHost</span> = <span class="string">&quot;FALSE&quot;</span></span><br><span class="line"><span class="attr">serialNumber</span> = <span class="string">&quot;xxxxxxx&quot;</span></span><br><span class="line"><span class="attr">smbios.reflectHost</span> = <span class="string">&quot;FALSE&quot;</span></span><br></pre></td></tr></table></figure><p><code>board-id.reflectHost</code>可能配置文件里已经设置了，如果重复了记得删除原来的设置</p><p>这里的序列码可以用变色龙生成或者在网上找找有没有现成的</p><p>最后网卡选择桥接模式（NAT貌似会影响apple id的登录）</p><h3 id="开机安装">开机安装</h3><p>准备就绪后开机安装系统</p><p>进入安装界面后先用磁盘工具抹除60G的VMware虚拟磁盘，然后正常安装系统到这块磁盘上</p><p>经过一段时间的等待和多次重启后，进入系统</p><h3 id="登录">登录</h3><p>安装完成后登录apple id，如果没有异常情况应该是能够成功登录的。</p><h2 id="开启订阅">开启订阅</h2><p>进入音乐app，登录apple id，然后选择订阅</p><p>这里又出现一个小插曲</p><p>订阅可以免费试用一个月，然而当我点击的时候，提示我需要添加支付方式</p><p>上网查了一下，有两种说法，一种说是被风控了，要重新注册账号，另一种是说账户余额不足以抵扣下一月</p><p>我看了一下，确实账户里只有25拉里不足以抵扣59.99拉里</p><p>为了保险起见，我又买了25拉里冲了进去，这样即使翻车了也只损失50拉里，</p><p>点击试用个人39.99拉里一个月的选项，成功试用没有提示添加支付方式😆</p><h2 id="迁移歌单">迁移歌单</h2><p>这个环节还行，有专门的工具，目前先迁移了500首，有108首迁移失败😢，希望只是歌名匹配问题，这样还可以手动添加（都是我喜欢的歌啊啊啊）</p><h2 id="安装VMware-tool（可选）">安装VMware tool（可选）</h2><p>如果闲的没事还可以装个VMware tool，这样至少屏幕帧率以及窗口大小正常</p><h2 id="后记">后记</h2><p>打算先爽几天个人订阅，等同学订阅要过期了再订阅家庭版</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;这篇文章算是半教程半记录吧&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;我同学昨天突然给我说想开am土区的家庭组，稍微查了一下，土区家庭组一个月59拉里，折合人民币11.02元（当前时间），一个</summary>
      
    
    
    
    <category term="说说" scheme="https://blog.goodboyboy.top/categories/%E8%AF%B4%E8%AF%B4/"/>
    
    
    <category term="Apple Music" scheme="https://blog.goodboyboy.top/tags/Apple-Music/"/>
    
    <category term="土区" scheme="https://blog.goodboyboy.top/tags/%E5%9C%9F%E5%8C%BA/"/>
    
  </entry>
  
  <entry>
    <title>日期进度条的小插件JavaScript版</title>
    <link href="https://blog.goodboyboy.top/posts/4118483650.html"/>
    <id>https://blog.goodboyboy.top/posts/4118483650.html</id>
    <published>2025-05-08T04:19:28.000Z</published>
    <updated>2025-05-08T04:28:49.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>今天逛博客发现了一个很好看的日期进度条的小插件，但是是PHP版的，对于Hexo这类静态博客用不了</p><p>不过从原理上来说获取时间其实并不是必须要服务器计算，因此按理应该可以转换为纯JavaScript</p><blockquote><p>文章原文-&gt;<a href="https://www.lifengdi.com/archives/article/4394">《写了个日期进度条的小插件》</a></p></blockquote><p>偷了个懒，直接让AI来转</p><div class="note info flat"><p>代码版权归 <a href="https://www.lifengdi.com">李锋镝的博客</a> 所有</p></div><h2 id="代码">代码</h2><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Countdown Timer<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;countdown-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;countdown-item&quot;</span> <span class="attr">id</span>=<span class="string">&quot;countdown-day&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;countdown-text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;countdown-progress-bar&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar-fill&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;countdown-percentage&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;countdown-item&quot;</span> <span class="attr">id</span>=<span class="string">&quot;countdown-week&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;countdown-text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;countdown-progress-bar&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar-fill&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;countdown-percentage&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;countdown-item&quot;</span> <span class="attr">id</span>=<span class="string">&quot;countdown-month&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;countdown-text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;countdown-progress-bar&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar-fill&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;countdown-percentage&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;countdown-item&quot;</span> <span class="attr">id</span>=<span class="string">&quot;countdown-year&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;countdown-text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;countdown-progress-bar&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar-fill&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;countdown-percentage&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>styles.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.countdown-container</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#FAF9F6</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">8px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.08</span>);</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.countdown-item</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.countdown-text</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#868e96</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.95em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.countdown-progress-bar</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#E8E8E8</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.progress-bar-fill</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: width <span class="number">1s</span> ease;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">repeating-linear-gradient</span>(</span><br><span class="line">        -<span class="number">45deg</span>,</span><br><span class="line">        <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.2</span>),</span><br><span class="line">        <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.2</span>) <span class="number">10px</span>,</span><br><span class="line">        transparent <span class="number">10px</span>,</span><br><span class="line">        transparent <span class="number">20px</span></span><br><span class="line">    );</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">28px</span> <span class="number">28px</span>;</span><br><span class="line">    <span class="attribute">animation</span>: spiral-move <span class="number">1s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.countdown-percentage</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.8em</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> spiral-move &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">28px</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>script.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置项</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    <span class="attr">types</span>: [<span class="string">&#x27;day&#x27;</span>, <span class="string">&#x27;week&#x27;</span>, <span class="string">&#x27;month&#x27;</span>, <span class="string">&#x27;year&#x27;</span>], <span class="comment">// 默认显示所有类型</span></span><br><span class="line">    <span class="attr">colorMap</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;day&#x27;</span>: <span class="string">&#x27;#B5EAD7&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;week&#x27;</span>: <span class="string">&#x27;#FFDAC1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;month&#x27;</span>: <span class="string">&#x27;#E2F0CB&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;year&#x27;</span>: <span class="string">&#x27;#FFB7B2&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新倒计时显示</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateCountdown</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    </span><br><span class="line">    config.<span class="property">types</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">type</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> elapsed = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> text = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;day&quot;</span>:</span><br><span class="line">                elapsed = now.<span class="title function_">getHours</span>() * <span class="number">3600</span> + now.<span class="title function_">getMinutes</span>() * <span class="number">60</span> + now.<span class="title function_">getSeconds</span>();</span><br><span class="line">                total = <span class="number">24</span> * <span class="number">3600</span>;</span><br><span class="line">                text = <span class="string">`今天已过去 <span class="subst">$&#123;<span class="built_in">Math</span>.floor(elapsed / <span class="number">3600</span>)&#125;</span> 小时 <span class="subst">$&#123;<span class="built_in">Math</span>.floor((elapsed % <span class="number">3600</span>) / <span class="number">60</span>)&#125;</span> 分钟`</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;week&quot;</span>:</span><br><span class="line">                elapsed = (now.<span class="title function_">getDay</span>() * <span class="number">24</span> * <span class="number">3600</span>) + (now.<span class="title function_">getHours</span>() * <span class="number">3600</span>) + (now.<span class="title function_">getMinutes</span>() * <span class="number">60</span>) + now.<span class="title function_">getSeconds</span>();</span><br><span class="line">                total = <span class="number">7</span> * <span class="number">24</span> * <span class="number">3600</span>;</span><br><span class="line">                text = <span class="string">`本周已过去 <span class="subst">$&#123;<span class="built_in">Math</span>.floor(elapsed / (<span class="number">24</span> * <span class="number">3600</span>))&#125;</span> 天 <span class="subst">$&#123;<span class="built_in">Math</span>.floor((elapsed % (<span class="number">24</span> * <span class="number">3600</span>)) / <span class="number">3600</span>)&#125;</span> 小时 <span class="subst">$&#123;<span class="built_in">Math</span>.floor((elapsed % <span class="number">3600</span>) / <span class="number">60</span>)&#125;</span> 分钟`</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;month&quot;</span>:</span><br><span class="line">                <span class="keyword">const</span> year = now.<span class="title function_">getFullYear</span>();</span><br><span class="line">                <span class="keyword">const</span> month = now.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">const</span> daysInMonth = <span class="keyword">new</span> <span class="title class_">Date</span>(year, month, <span class="number">0</span>).<span class="title function_">getDate</span>();</span><br><span class="line">                elapsed = ((now.<span class="title function_">getDate</span>() - <span class="number">1</span>) * <span class="number">24</span> * <span class="number">3600</span>) + (now.<span class="title function_">getHours</span>() * <span class="number">3600</span>) + (now.<span class="title function_">getMinutes</span>() * <span class="number">60</span>) + now.<span class="title function_">getSeconds</span>();</span><br><span class="line">                total = daysInMonth * <span class="number">24</span> * <span class="number">3600</span>;</span><br><span class="line">                text = <span class="string">`本月已过去 <span class="subst">$&#123;<span class="built_in">Math</span>.floor(elapsed / (<span class="number">24</span> * <span class="number">3600</span>))&#125;</span> 天 <span class="subst">$&#123;<span class="built_in">Math</span>.floor((elapsed % (<span class="number">24</span> * <span class="number">3600</span>)) / <span class="number">3600</span>)&#125;</span> 小时 <span class="subst">$&#123;<span class="built_in">Math</span>.floor((elapsed % <span class="number">3600</span>) / <span class="number">60</span>)&#125;</span> 分钟`</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;year&quot;</span>:</span><br><span class="line">                <span class="keyword">const</span> startOfYear = <span class="keyword">new</span> <span class="title class_">Date</span>(now.<span class="title function_">getFullYear</span>(), <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">const</span> diff = now - startOfYear;</span><br><span class="line">                elapsed = <span class="title class_">Math</span>.<span class="title function_">floor</span>(diff / <span class="number">1000</span>);</span><br><span class="line">                <span class="keyword">const</span> isLeapYear = (<span class="keyword">new</span> <span class="title class_">Date</span>(now.<span class="title function_">getFullYear</span>(), <span class="number">1</span>, <span class="number">29</span>).<span class="title function_">getDate</span>() === <span class="number">29</span>);</span><br><span class="line">                total = (isLeapYear ? <span class="number">366</span> : <span class="number">365</span>) * <span class="number">24</span> * <span class="number">3600</span>;</span><br><span class="line">                text = <span class="string">`今年已过去 <span class="subst">$&#123;<span class="built_in">Math</span>.floor(elapsed / (<span class="number">24</span> * <span class="number">3600</span>))&#125;</span> 天 <span class="subst">$&#123;<span class="built_in">Math</span>.floor((elapsed % (<span class="number">24</span> * <span class="number">3600</span>)) / <span class="number">3600</span>)&#125;</span> 小时 <span class="subst">$&#123;<span class="built_in">Math</span>.floor((elapsed % <span class="number">3600</span>) / <span class="number">60</span>)&#125;</span> 分钟`</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> percentage = <span class="title class_">Math</span>.<span class="title function_">round</span>((elapsed / total) * <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">const</span> item = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">`countdown-<span class="subst">$&#123;type&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">if</span> (item) &#123;</span><br><span class="line">            <span class="keyword">const</span> textElement = item.<span class="title function_">querySelector</span>(<span class="string">&quot;.countdown-text&quot;</span>);</span><br><span class="line">            <span class="keyword">const</span> percentageElement = item.<span class="title function_">querySelector</span>(<span class="string">&quot;.countdown-percentage&quot;</span>);</span><br><span class="line">            <span class="keyword">const</span> progressBarElement = item.<span class="title function_">querySelector</span>(<span class="string">&quot;.progress-bar-fill&quot;</span>);</span><br><span class="line"></span><br><span class="line">            textElement.<span class="property">textContent</span> = text;</span><br><span class="line">            percentageElement.<span class="property">textContent</span> = <span class="string">`<span class="subst">$&#123;percentage&#125;</span>%`</span>;</span><br><span class="line">            progressBarElement.<span class="property">style</span>.<span class="property">width</span> = <span class="string">`<span class="subst">$&#123;percentage&#125;</span>%`</span>;</span><br><span class="line">            progressBarElement.<span class="property">style</span>.<span class="property">backgroundColor</span> = config.<span class="property">colorMap</span>[type];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 可以根据需要动态隐藏某些类型的倒计时</span></span><br><span class="line">    <span class="comment">// 例如，如果只想显示day和week:</span></span><br><span class="line">    <span class="comment">// config.types = [&#x27;day&#x27;, &#x27;week&#x27;];</span></span><br><span class="line">    </span><br><span class="line">    <span class="title function_">updateCountdown</span>();</span><br><span class="line">    <span class="built_in">setInterval</span>(updateCountdown, <span class="number">1000</span> * <span class="number">60</span>); <span class="comment">// 每分钟更新一次</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="测试">测试</h2><p>本地测试下来应该没什么问题</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;今天逛博客发现了一个很好看的日期进度条的小插件，但是是PHP版的，对于Hexo这类静态博客用不了&lt;/p&gt;
&lt;p&gt;不过从原理上来说获取时间其实并不是必须要服务器计算，因此按理应该可以转换为纯JavaScript&lt;/p&gt;
&lt;blockqu</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Fast Auth——2FA APP开发进度汇报</title>
    <link href="https://blog.goodboyboy.top/posts/3598556359.html"/>
    <id>https://blog.goodboyboy.top/posts/3598556359.html</id>
    <published>2025-05-07T14:59:15.000Z</published>
    <updated>2025-05-12T14:41:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开发进度">开发进度</h2><div class="note warning flat"><p>由于临近期末，需要推进即将截止的两个课设以及进行期末复习，开发进度暂时放缓。</p></div><p>目前开发进度已达到70%左右（整个项目进度），已实现核心功能</p><h2 id="已开发功能">已开发功能</h2><ul><li>[x] TOTP</li><li>[ ] HTOP</li><li>[ ] STEAM令牌</li><li>[x] 使用Android密钥库加密存储Secret</li><li>[ ] 导出<ul><li>[ ] 明文导出</li></ul></li><li>[ ] 端到端迁移<ul><li>[ ] NFC迁移</li><li>[ ] QR迁移</li></ul></li></ul><h2 id="界面">界面</h2><div class="note info flat"><p>该演示图不代表最终效果（不过也大差不差了doge）</p></div><blockquote><p>亮色模式下</p></blockquote><div class="gallery-container" data-type="data" data-button="" data-limit="10" data-first="10">    <div class="gallery-items">[{"url":"https://pic.goodboyboy.top/imgs/2025/05/08/5g0v2.webp","alt":"首页","title":""},{"url":"https://pic.goodboyboy.top/imgs/2025/05/08/7h6t7.webp","alt":"设置页面","title":""}]</div>  </div><blockquote><p>暗色模式下</p></blockquote><div class="gallery-container" data-type="data" data-button="" data-limit="10" data-first="10">    <div class="gallery-items">[{"url":"https://pic.goodboyboy.top/imgs/2025/05/08/5pakd.webp","alt":"首页","title":""},{"url":"https://pic.goodboyboy.top/imgs/2025/05/08/5oz36.webp","alt":"设置页面","title":""}]</div>  </div><h2 id="存储加密逻辑">存储加密逻辑</h2><h3 id="MasterKey存储">MasterKey存储</h3><pre><code class="highlight mermaid">sequenceDiagram    participant App as 客户端/应用    participant AndroidKeystore as Android密钥库系统    participant MasterKey as MasterKey    App-&gt;&gt;AndroidKeystore: 1. 创建密钥库(KeyStore)    App-&gt;&gt;MasterKey: 2. 生成MasterKey        App-&gt;&gt;AndroidKeystore: 3.发起生物认证        AndroidKeystore-&gt;&gt;MasterKey: 4. 使用AES-256加密MasterKey    MasterKey--&gt;&gt;App: 返回加密后的MasterKey</code></pre><h3 id="加密Secret">加密Secret</h3><pre><code class="highlight mermaid">sequenceDiagram    participant App as 客户端/应用    participant AndroidKeystore as Android密钥库系统    participant MasterKey as MasterKey    participant OTPSecrete as OTPSecrete    App-&gt;&gt;AndroidKeystore: 1. 发起生物认证    AndroidKeystore-&gt;&gt;MasterKey: 2. 解密MasterKey        MasterKey-&gt;&gt;OTPSecrete: 3.使用AES-256加密OTPSecrete        OTPSecrete--&gt;&gt;App: 返回加密后的OTPSecrete</code></pre><h3 id="解密Secret">解密Secret</h3><pre><code class="highlight mermaid">sequenceDiagram    participant App as 客户端/应用    participant AndroidKeystore as Android密钥库系统    participant MasterKey as MasterKey    participant OTPSecrete as OTPSecrete    App-&gt;&gt;AndroidKeystore: 1. 发起生物认证    AndroidKeystore-&gt;&gt;MasterKey: 2. 解密MasterKey        MasterKey-&gt;&gt;OTPSecrete: 3.使用解密OTPSecrete        OTPSecrete--&gt;&gt;App: 返回解密后的OTPSecrete</code></pre><h2 id="后记">后记</h2><p>本来是打算走QR迁移的，突然灵光一闪想着NFC不也是可以传输数据，并且安全性比QR高很多。</p><p>查了一下，不同的NFC tag的容量不一样，但是如果使用Android NFC的点对点功能，NDEF Push Protocol对NDEF消息长度并没有严格的上限，Payload Length允许为4字节长度。</p><p>所以理论上可以传输<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{32}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">32</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>字节的数据，约4GB（雾），不过貌似实际超过几十KB到上百KB的消息就容易出现传输失败。</p><p>到时候可以做个选项，要是数据少的可以直接通过NFC传完，要是数据多的话就通过NFC交换AES加密密钥</p><p>如果有闲心的话弄个ECC也不是不行，用QR或者NFC传递公钥，不过目前Android密钥库貌似只支持ECDSA，并且没有像OpenPGP那样支持使用基于Curve25519的加密功能（我宁可用国密也不想用ECDSA），到时候找找有没有什么靠谱的实现</p><p>另外暂时没有找到好的图标来源，到时候再看吧</p><p>自己做软件的好处之一就是想加什么功能自己加就完事了（doge</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;开发进度&quot;&gt;开发进度&lt;/h2&gt;
&lt;div class=&quot;note warning flat&quot;&gt;&lt;p&gt;由于临近期末，需要推进即将截止的两个课设以及进行期末复习，开发进度暂时放缓。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;目前开发进度已达到70%左右（整个项目进度），已实现核心功</summary>
      
    
    
    
    <category term="应用" scheme="https://blog.goodboyboy.top/categories/%E5%BA%94%E7%94%A8/"/>
    
    
    <category term="2FA" scheme="https://blog.goodboyboy.top/tags/2FA/"/>
    
  </entry>
  
  <entry>
    <title>五一单日长沙游</title>
    <link href="https://blog.goodboyboy.top/posts/3427455399.html"/>
    <id>https://blog.goodboyboy.top/posts/3427455399.html</id>
    <published>2025-05-04T12:33:44.000Z</published>
    <updated>2025-05-04T12:33:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小电车">小电车</h2><p>最近租小电车租上瘾了，刚好发现青桔的有一天无限次骑，只要7块钱，于是果断下单。</p><p>不得不说，长沙的红灯是真的长</p><p>显示99秒不是要等99秒，而是它最多只能显示到99秒😂</p><p><img src="https://pic.goodboyboy.top/imgs/2025/05/05/w4emd1.webp" alt="等红灯"></p><p>不过有了小电车后确实方便很多，比起五一在地铁里人挤人，我还是更喜欢骑车兜风</p><p>就是当天太阳有点大，没做防晒，结果有点晒伤了😢</p><h2 id="CityWalk">CityWalk</h2><p>说实在的，逛了这么多次，觉得长沙没啥好逛的，感觉能逛的都逛完了。</p><p>去湖师大转转，发现还有好几个小孩子在拍照</p><p><img src="https://pic.goodboyboy.top/imgs/2025/05/05/wc7xy2.webp" alt="IMG20250502141749"></p><p>尽管知道五一广场这边人多，但就是忍不住想来凑凑热闹（逃</p><p>哎，果然是众众众众众众众众众众众众众众众众众众众众</p><p><img src="https://pic.goodboyboy.top/imgs/2025/05/05/x3dixf.webp" alt="众众众众众众众众众众"></p><p><img src="https://pic.goodboyboy.top/imgs/2025/05/05/x5ylmg.webp" alt="众众众众众众众众众众"></p><p><img src="https://pic.goodboyboy.top/imgs/2025/05/05/x6eyy7.webp" alt="众众众众众众众众众众"></p><h2 id="湘江">湘江</h2><p>人太多了还是来看湘江吧。。。</p><p>本来打算去橘子洲，突然想起这玩意好像要预约，一看结果全预约满了😢</p><p>那就只能在对岸看了，不过对岸也舒服很多，人数比较适中，我猜橘子洲里肯定也是众众众众众众众众众众</p><p><img src="https://pic.goodboyboy.top/imgs/2025/05/05/xevy5v.webp" alt="湘江"></p><p><img src="https://pic.goodboyboy.top/imgs/2025/05/05/xbs24o.webp" alt="湘江"></p><p><img src="https://pic.goodboyboy.top/imgs/2025/05/05/xbbwzj.webp" alt="湘江"></p><p><img src="https://pic.goodboyboy.top/imgs/2025/05/05/xlz4bn.webp" alt="湘江"></p><h2 id="晚上">晚上</h2><p>晚上逛街发现一家“超级零食很忙”</p><p>看起来确实是“超级”，比平常门店大很多</p><p><img src="https://pic.goodboyboy.top/imgs/2025/05/05/xvbtg6.webp" alt="超级零食很忙"></p><h2 id="返程">返程</h2><p>拍一张晚上的长沙站</p><p><img src="https://pic.goodboyboy.top/imgs/2025/05/05/yqi5c0.webp" alt="长沙站"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;小电车&quot;&gt;小电车&lt;/h2&gt;
&lt;p&gt;最近租小电车租上瘾了，刚好发现青桔的有一天无限次骑，只要7块钱，于是果断下单。&lt;/p&gt;
&lt;p&gt;不得不说，长沙的红灯是真的长&lt;/p&gt;
&lt;p&gt;显示99秒不是要等99秒，而是它最多只能显示到99秒😂&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;</summary>
      
    
    
    
    <category term="生活" scheme="https://blog.goodboyboy.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="旅游" scheme="https://blog.goodboyboy.top/categories/%E6%97%85%E6%B8%B8/"/>
    
    
    <category term="旅游" scheme="https://blog.goodboyboy.top/tags/%E6%97%85%E6%B8%B8/"/>
    
    <category term="长沙" scheme="https://blog.goodboyboy.top/tags/%E9%95%BF%E6%B2%99/"/>
    
  </entry>
  
  <entry>
    <title>预定一个2FA APP</title>
    <link href="https://blog.goodboyboy.top/posts/3611721441.html"/>
    <id>https://blog.goodboyboy.top/posts/3611721441.html</id>
    <published>2025-04-30T13:48:33.000Z</published>
    <updated>2025-04-30T13:48:33.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note warning flat"><p>设备Root后会显著降低密钥安全性，建议在非Root设备上使用。</p></div><div class="note info flat"><p>开发进度-&gt; <a href="/posts/3598556359.html">Fast Auth——2FA APP开发进度汇报</a></p></div><h2 id="需求">需求</h2><ul><li>导出需求</li></ul><p>目前市面上很多2FA验证器都不支持导出2FA，虽然说不可导出可以增加安全性，但是我个人觉得既然是2FA了，可以牺牲一点安全性提高一下便利性。</p><ul><li>美观</li></ul><p>很多2FA确实很好看，但不支持导出，例如authy，很多支持导出的又不好看</p><ul><li>代码安全性</li></ul><p>部分商业APP不开源，无法进行代码审计</p><ul><li>数据安全性</li></ul><p>TOTP/HOTP Secret预计使用AES256进行加密（有条件情况下使用X25519），加密密钥由Android密钥库保存，每次解锁需要强制生物验证。</p><div class="note warning flat"><p>数据迁移助手之类的软件一般不会迁移Android密钥库密钥，因此迁移的数据库数据将无法正常解密，需要手动导出2FA Secret至新设备！</p></div><h2 id="预计功能">预计功能</h2><ul><li>支持TOTP/HOTP（后期支持Steam令牌）</li><li>支持明文导出</li><li>支持双设备迁移</li><li>全离线加密存储</li></ul><h2 id="外观设计">外观设计</h2><p>使用Jetpack Compose设计，采用Material主题，支持动态取色，暗色模式。</p><h2 id="系统要求">系统要求</h2><p>系统版本：Android 9+<br>不可Root（不会检测）</p><h2 id="开源">开源</h2><p>预计采用GPLv3协议进行开源</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note warning flat&quot;&gt;&lt;p&gt;设备Root后会显著降低密钥安全性，建议在非Root设备上使用。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;开发进度-&amp;gt; &lt;a href=&quot;/posts/35985</summary>
      
    
    
    
    <category term="应用" scheme="https://blog.goodboyboy.top/categories/%E5%BA%94%E7%94%A8/"/>
    
    
    <category term="2FA" scheme="https://blog.goodboyboy.top/tags/2FA/"/>
    
  </entry>
  
  <entry>
    <title>OpenID Connect认证流程</title>
    <link href="https://blog.goodboyboy.top/posts/3034134255.html"/>
    <id>https://blog.goodboyboy.top/posts/3034134255.html</id>
    <published>2025-04-25T12:55:33.000Z</published>
    <updated>2025-04-25T12:55:33.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><p>本文使用最常用的Authorization Code的Code认证方式，IdP采用ZITADEL</p></div><p>首先依赖方会要求提供<code>discovery endpoint</code>，具体地址由IdP提供，一般为<code>&#123;idp_domain&#125;/.well-known/openid-configuration</code>，该链接包含认证所需的很多endpoint。</p><p>然后在授权服务器注册应用，注册完成后会得到<code>Client ID</code>与<code>Client Secret</code>，注册时填写的callback地址由依赖方提供，用于用户完成授权后客户端调用callback地址传递授权码。</p><h2 id="认证流程">认证流程</h2><h3 id="重定向授权页面">重定向授权页面</h3><p>由依赖方在登录页面发起授权请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;idp_domain&#125;/oauth/v2/authorize</span><br><span class="line">?response_type=code</span><br><span class="line">&amp;client_id=CLIENT_ID</span><br><span class="line">&amp;redirect_uri=REDIRECT_URI</span><br><span class="line">&amp;scope=SCOPE</span><br><span class="line">&amp;state=STATE</span><br></pre></td></tr></table></figure><p>其中<code>CLIENT_ID</code>为注册应用时获得的Client ID，<code>REDIRECT_URI</code>为注册应用时填写的callback地址，<code>SCOPE</code>为授权范围，具体范围需要参考IdP，在<code>discovery endpoint</code>中<code>scopes_supported</code>也可以看到可以申请的授权范围，<code>STATE</code>为由依赖方产生的随机值，用于防止CSRF攻击，在授权完成调用callback地址时会附加在链接中，便于依赖方校对。</p><h3 id="重定向callback地址">重定向callback地址</h3><p>用户授权完成后重定向至callback url</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;callback_url&#125;</span><br><span class="line">?code=CODE</span><br><span class="line">&amp;state=STATE</span><br></pre></td></tr></table></figure><p>其中<code>CODE</code>为授权码，<code>STATE</code>与上文一致</p><h3 id="请求Access-Token">请求Access Token</h3><p>依赖方后端收到授权码，校验state后向<code>token endpoint</code>请求Access Token</p><p>后端构建Authorization头：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: &quot;Basic &quot; + base64( formUrlEncode(client_id) + &quot;:&quot; + formUrlEncode(client_secret) )</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;idp_domain&#125;/oauth/v2/token</span><br><span class="line"></span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Authorization: Basic xxxxxxxxxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">grant_type=authorization_code</span><br><span class="line">code=CODE</span><br><span class="line">redirect_uri=REDIRECT_URI</span><br><span class="line">scope=SCOPE</span><br></pre></td></tr></table></figure><p><code>CODE</code>，<code>REDIRECT_URI</code>，<code>SCOPE</code>同上文一致</p><p>返回如下Json：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;access_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XXXXXXXXXXXXXXXXXXXXXXXX&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;token_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bearer&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;expires_in&quot;</span><span class="punctuation">:</span> <span class="number">43199</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>ZITADEL<code>refresh_token</code>需要在scope内添加<code>offline_access</code>，否则返回内容不会有refresh_token<br>ZITADEL<code>id_token</code>默认不会含有email，profile之类的信息（即使scope已声明），需要在应用设置，令牌设置内勾选<code>在 ID Token 中包含用户信息</code>，或者直接向<code>userinfo_endpoint</code>请求用户信息。</p></div><h3 id="获取用户信息">获取用户信息</h3><p>后端向<code>userinfo_endpoint</code>请求用户信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;idp_domain&#125;/oidc/v1/userinfo</span><br><span class="line">Authorization: Bearer ACCESS_TOKEN</span><br></pre></td></tr></table></figure><p>其中<code>ACCESS_TOKEN</code>为上文拿到的Access Token</p><p>返回如下Json</p><div class="note info flat"><p>不同IdP可能不一样</p></div><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;000000000000000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxxxxxxxxxxxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;given_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxxxxxxxxxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;family_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxxxxxxxxxxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;locale&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;updated_at&quot;</span><span class="punctuation">:</span> <span class="number">0000000000000000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;preferred_username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx@xxxxxxxxxxxxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxxxxxxxx@xxxxxxxxx.xxxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;email_verified&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;本文使用最常用的Authorization Code的Code认证方式，IdP采用ZITADEL&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;首先依赖方会要求提供&lt;code&gt;discovery endpoint&lt;/code&gt;，具体地址</summary>
      
    
    
    
    <category term="教程" scheme="https://blog.goodboyboy.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Web" scheme="https://blog.goodboyboy.top/categories/Web/"/>
    
    
    <category term="OpenID Connect" scheme="https://blog.goodboyboy.top/tags/OpenID-Connect/"/>
    
    <category term="oidc" scheme="https://blog.goodboyboy.top/tags/oidc/"/>
    
    <category term="OAuth2" scheme="https://blog.goodboyboy.top/tags/OAuth2/"/>
    
  </entry>
  
  <entry>
    <title>OAuth 2.0 Client Secret 模式和 PKCE 模式区别</title>
    <link href="https://blog.goodboyboy.top/posts/873069865.html"/>
    <id>https://blog.goodboyboy.top/posts/873069865.html</id>
    <published>2025-04-22T12:19:59.000Z</published>
    <updated>2025-04-22T12:19:59.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><p>本文由DeepSeek生成，仅用于博主学习笔记记录</p></div><h2 id="关键区别对比"><strong>关键区别对比</strong></h2><table><thead><tr><th>特性</th><th>传统 Client Secret 模式</th><th>PKCE 模式（无 Client Secret）</th></tr></thead><tbody><tr><td><strong>适用场景</strong></td><td>机密客户端（有后端服务器）</td><td>公开客户端（SPA、移动端、无后端）</td></tr><tr><td><strong>是否需要 <code>client_secret</code></strong></td><td>✅ 需要（后端存储）</td><td>❌ 不需要</td></tr><tr><td><strong>令牌请求方</strong></td><td>由<strong>应用后端</strong>向授权服务器换取令牌</td><td>由<strong>应用后端</strong>或<strong>前端</strong>换取令牌（但无需 <code>client_secret</code>）</td></tr><tr><td><strong>核心安全机制</strong></td><td>依赖 <code>client_secret</code> 的保密性</td><td>依赖动态的 <code>code_verifier</code> 和 <code>code_challenge</code></td></tr><tr><td><strong>攻击防护</strong></td><td>需防止 <code>client_secret</code> 泄露</td><td>防止授权码截获（即使泄露 <code>code</code> 也无法换令牌）</td></tr></tbody></table><hr><h2 id="详细流程对比"><strong>详细流程对比</strong></h2><h3 id="1-Client-Secret-模式（传统后端换令牌）"><strong>1. Client Secret 模式（传统后端换令牌）</strong></h3><pre><code class="highlight mermaid">sequenceDiagram    participant 用户    participant 前端    participant 后端    participant 授权服务器    用户-&gt;&gt;前端: 点击登录    前端-&gt;&gt;授权服务器: 重定向授权页面（带 client_id）    用户-&gt;&gt;授权服务器: 登录并授权    授权服务器-&gt;&gt;前端: 返回 code 到 redirect_uri    前端-&gt;&gt;后端: 发送 code    后端-&gt;&gt;授权服务器: 用 code + client_secret 换 token    授权服务器-&gt;&gt;后端: 返回 access_token    后端-&gt;&gt;前端: 返回 token 或用户数据</code></pre><ul><li><strong>关键点</strong>：<code>client_secret</code> 由后端安全存储，前端不接触。</li></ul><h3 id="2-PKCE-模式（无-Client-Secret，适合公开客户端）"><strong>2. PKCE 模式（无 Client Secret，适合公开客户端）</strong></h3><pre><code class="highlight mermaid">sequenceDiagram    participant 用户    participant 前端    participant 授权服务器    用户-&gt;&gt;前端: 点击登录    前端-&gt;&gt;前端: 生成 code_verifier 和 code_challenge    前端-&gt;&gt;授权服务器: 重定向授权页面（带 code_challenge）    用户-&gt;&gt;授权服务器: 登录并授权    授权服务器-&gt;&gt;前端: 返回 code 到 redirect_uri    前端-&gt;&gt;授权服务器: 用 code + code_verifier 换 token    授权服务器-&gt;&gt;前端: 返回 access_token</code></pre><ul><li><strong>关键点</strong>：全程无需 <code>client_secret</code>，依赖 <code>code_verifier</code> 的临时性和唯一性。</li></ul><hr><h2 id="为什么-PKCE-更安全？"><strong>为什么 PKCE 更安全？</strong></h2><ol><li><p><strong>防御授权码截获攻击</strong></p><ul><li>即使攻击者截获 <code>authorization_code</code>，也无法使用它（缺少 <code>code_verifier</code>）。</li></ul></li><li><p><strong>无需长期密钥</strong></p><ul><li><code>client_secret</code> 是长期有效的，一旦泄露风险极大；而 <code>code_verifier</code> 仅单次有效。</li></ul></li><li><p><strong>适应公开客户端限制</strong></p><ul><li>移动端或 SPA 无法安全存储 <code>client_secret</code>，PKCE 提供了替代方案。</li></ul></li></ol><hr><h2 id="何时用哪种模式？"><strong>何时用哪种模式？</strong></h2><table><thead><tr><th>客户端类型</th><th>推荐模式</th><th>原因</th></tr></thead><tbody><tr><td>传统 Web 应用（有后端）</td><td>Client Secret + 授权码模式</td><td>后端可安全存储 <code>client_secret</code></td></tr><tr><td>单页应用（SPA）</td><td>PKCE（无 Client Secret）</td><td>前端无法保密 <code>client_secret</code></td></tr><tr><td>移动端应用</td><td>PKCE + 后端代理换令牌</td><td>避免前端直接处理 <code>access_token</code>（即使使用 PKCE，令牌也应尽量由后端管理）</td></tr></tbody></table><hr><h2 id="常见误解澄清"><strong>常见误解澄清</strong></h2><h3 id="❌-误解1：PKCE-不需要后端">❌ 误解1：PKCE 不需要后端</h3><ul><li><p><strong>事实</strong>：PKCE 可以完全在前端实现（如 SPA），但如果有后端，仍推荐由后端换令牌（避免前端暴露 <code>access_token</code>）。</p></li><li><p><strong>安全增强</strong>：即使使用 PKCE，最佳实践仍是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">前端拿到 code → 发给后端 → 后端用 code_verifier 换 token → 返回 token 给前端</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="❌-误解2：OAuth2-只是用来做“第三方登录”的">❌ 误解2：OAuth2 只是用来做“第三方登录”的</h3><ul><li><strong>事实</strong>：<br>OAuth2 的核心是 <strong>授权委托</strong>（Authorization Delegation），而不仅仅是登录。<ul><li><strong>登录（认证）</strong> 是 OpenID Connect（OAuth2 的扩展协议）的功能。</li><li><strong>原生用途</strong>：控制资源访问权限（如允许 GitHub 应用访问你的仓库）。</li></ul></li></ul><hr><h3 id="❌-误解3：PKCE-只用于移动端或-SPA">❌ 误解3：PKCE 只用于移动端或 SPA</h3><ul><li><strong>事实</strong>：<br>PKCE <strong>对所有客户端类型均有益</strong>，包括传统 Web 应用：<ul><li>可防止授权码截获攻击（即使有机密客户端也应启用 PKCE）。</li><li>例如：GitHub 的 OAuth2 已强制要求所有客户端使用 PKCE。</li></ul></li></ul><hr><h3 id="❌-误解4：state-参数是可选的">❌ 误解4：<code>state</code> 参数是可选的</h3><ul><li><strong>事实</strong>：<br><code>state</code> 是 <strong>防御 CSRF 攻击的必备参数</strong>，必须满足：<ul><li><p><strong>随机性</strong>：每次请求生成唯一值（如 UUID）。</p></li><li><p><strong>绑定会话</strong>：校验回调时是否与初始请求一致。</p></li><li><p><strong>错误示例</strong>：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/authorize?response_type=code&amp;client_id=xxx  </span><br><span class="line"># ❌ 缺少 state 参数！</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h3 id="❌-误解5：前端可以直接用-access-token-调用-API">❌ 误解5：前端可以直接用 <code>access_token</code> 调用 API</h3><ul><li><strong>事实</strong>：<ul><li><strong>风险</strong>：前端暴露 <code>access_token</code> 可能导致 XSS 攻击窃取令牌。</li><li><strong>正确做法</strong>：<ul><li>通过后端代理 API 请求（前端传 <code>token</code> 给后端，后端校验后转发）。</li><li>使用 <strong>短期有效的 <code>access_token</code></strong> + <code>refresh_token</code>（存储在后端）。</li></ul></li></ul></li></ul><hr><h3 id="❌-误解6：refresh-token-可以无限期使用">❌ 误解6：<code>refresh_token</code> 可以无限期使用</h3><ul><li><strong>事实</strong>：<ul><li><code>refresh_token</code> 应有 <strong>有效期</strong> 和 <strong>使用限制</strong>：<ul><li>例如：GitHub 的 <code>refresh_token</code> 默认 6 个月过期。</li></ul></li><li>必须配合 <code>client_secret</code> 或 PKCE 使用（不能裸奔）。</li></ul></li></ul><hr><h3 id="❌-误解7：OAuth2-的-implicit-流程适合-SPA">❌ 误解7：OAuth2 的 <code>implicit</code> 流程适合 SPA</h3><ul><li><strong>事实</strong>：<ul><li><code>implicit</code> 流程（直接返回 <code>token</code> 到前端）<strong>已被废弃</strong>（RFC 6749 附录 10.3）。</li><li><strong>现代替代方案</strong>：PKCE + 授权码模式（即使 SPA 也应通过后端换令牌）。</li></ul></li></ul><hr><h3 id="❌-误解8：OAuth2-不需要-HTTPS">❌ 误解8：OAuth2 不需要 HTTPS</h3><ul><li><strong>事实</strong>：<ul><li><p><strong>所有 OAuth2 流量必须通过 HTTPS</strong>：</p><ul><li>防止 <code>code</code>、<code>token</code> 被中间人窃取。</li><li>例外：仅限 <code>localhost</code> 环回地址（如开发环境）。</li></ul></li><li><p><strong>致命错误</strong>：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://gitea.com/login/oauth/authorize?...  </span><br><span class="line"># ❌ 非 HTTPS 的授权端点！</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="总结"><strong>总结</strong></h2><ul><li><strong>Client Secret 模式</strong>：依赖后端保护的静态密钥，适合有机密存储能力的应用。</li><li><strong>PKCE 模式</strong>：通过动态临时密钥实现安全，专为无法保密 <code>client_secret</code> 的公开客户端设计。</li><li><strong>核心原则</strong>：无论哪种模式，都应确保 <code>access_token</code> 不暴露给不可信的上下文（如前端页面 URL）。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;本文由DeepSeek生成，仅用于博主学习笔记记录&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;关键区别对比&quot;&gt;&lt;strong&gt;关键区别对比&lt;/strong&gt;&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性</summary>
      
    
    
    
    <category term="笔记" scheme="https://blog.goodboyboy.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Web" scheme="https://blog.goodboyboy.top/categories/Web/"/>
    
    
    <category term="OAuth2" scheme="https://blog.goodboyboy.top/tags/OAuth2/"/>
    
  </entry>
  
  <entry>
    <title>博客明信片v2版发布啦，喜欢就快来申请一张吧！</title>
    <link href="https://blog.goodboyboy.top/posts/1630314981.html"/>
    <id>https://blog.goodboyboy.top/posts/1630314981.html</id>
    <published>2025-04-20T07:32:50.000Z</published>
    <updated>2025-04-20T07:32:50.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note success flat"><p>第二版博客明信片制作完成，选一张自己喜欢的吧~😁<br>申请详情-&gt; <a href="/posts/243612221.html">设计了一张博客明信片</a></p></div><h2 id="落日系列">落日系列</h2><p><img src="https://pic.goodboyboy.top/imgs/2025/04/20/qzv9ub.webp" alt="落日系列"></p><h2 id="湖泊系列">湖泊系列</h2><p><img src="https://pic.goodboyboy.top/imgs/2025/04/20/r1ghoz.webp" alt="湖泊系列"></p><h2 id="Flower系列">Flower系列</h2><p><img src="https://pic.goodboyboy.top/imgs/2025/04/20/r2oq5f.webp" alt="Flower系列"></p><p><img src="https://pic.goodboyboy.top/imgs/2025/04/20/r3wy3i.webp" alt="Flower系列"></p><h2 id="Human系列">Human系列</h2><p><img src="https://pic.goodboyboy.top/imgs/2025/04/20/r4f7c1.webp" alt="Human系列"></p><h2 id="建筑系列">建筑系列</h2><p><img src="https://pic.goodboyboy.top/imgs/2025/04/20/r4jw4c.webp" alt="建筑系列"></p><h2 id="背面">背面</h2><p><img src="https://pic.goodboyboy.top/imgs/2025/04/20/r4o641.webp" alt="背面"></p><p>相较于v1版，v2版背面的邮编框和右侧邮票框大小进行了调整，同时，移除了收信地址栏预留的<code>To</code>以及下划线</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note success flat&quot;&gt;&lt;p&gt;第二版博客明信片制作完成，选一张自己喜欢的吧~😁&lt;br&gt;
申请详情-&amp;gt; &lt;a href=&quot;/posts/243612221.html&quot;&gt;设计了一张博客明信片&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;</summary>
      
    
    
    
    <category term="生活" scheme="https://blog.goodboyboy.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="明信片" scheme="https://blog.goodboyboy.top/categories/%E6%98%8E%E4%BF%A1%E7%89%87/"/>
    
    
    <category term="明信片" scheme="https://blog.goodboyboy.top/tags/%E6%98%8E%E4%BF%A1%E7%89%87/"/>
    
    <category term="博客" scheme="https://blog.goodboyboy.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>博客明信片打样完成</title>
    <link href="https://blog.goodboyboy.top/posts/1538506451.html"/>
    <id>https://blog.goodboyboy.top/posts/1538506451.html</id>
    <published>2025-04-16T14:33:29.000Z</published>
    <updated>2025-04-16T14:33:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天明信片快递到了，下面是打印的效果：</p><p><img src="https://pic.goodboyboy.top/imgs/2025/04/16/10yzxki.webp" alt="外包装"></p><p><img src="https://pic.goodboyboy.top/imgs/2025/04/16/10yx537.webp" alt="明信片"></p><p>看了一下，背面还有需要调整的地方，1.2元的邮票会挡住收信地址栏一部分，还可能挡住OpenPGP Key的条码，另外邮编框也有点小了，打算先把第一批申请的发出去，然后准备打第二版。</p><p>第二版的话会增加其他封面，敬请期待~😁</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天明信片快递到了，下面是打印的效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.goodboyboy.top/imgs/2025/04/16/10yzxki.webp&quot; alt=&quot;外包装&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.goo</summary>
      
    
    
    
    <category term="生活" scheme="https://blog.goodboyboy.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="明信片" scheme="https://blog.goodboyboy.top/categories/%E6%98%8E%E4%BF%A1%E7%89%87/"/>
    
    
    <category term="明信片" scheme="https://blog.goodboyboy.top/tags/%E6%98%8E%E4%BF%A1%E7%89%87/"/>
    
  </entry>
  
</feed>
